{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Sora Gift Store - Replit Guide\n\n## Overview\n\nSora Gift Store is a premium e-commerce web application for magical gift experiences. Built with modern web technologies, it features a sophisticated React frontend with a Node.js/Express backend, designed for selling luxury gifts across various categories like birthdays, anniversaries, festivals, and corporate gifting. The application emphasizes premium aesthetics with golden/burgundy theming, smooth animations, and a comprehensive shopping experience including cart management, user authentication, and checkout processes.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with functional components and hooks\n- **Routing**: Wouter for lightweight client-side routing\n- **Styling**: Tailwind CSS with custom design system using golden (#FFD700), burgundy (#AC1C1C), and cream (#F5EBDD) color palette\n- **UI Components**: Radix UI primitives with shadcn/ui component library for consistent, accessible interface elements\n- **State Management**: React Context API for global state (Auth, Cart, Theme) with React Query for server state management\n- **Typography**: Playfair Display for headings (premium serif) and Montserrat for body text (clean sans-serif)\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js server framework\n- **API Design**: RESTful API structure with `/api` prefix routing\n- **Development**: Vite for fast development and hot module replacement\n- **Build System**: ESBuild for production builds with platform-specific optimizations\n- **Session Management**: Express sessions with PostgreSQL session store\n\n### Data Storage Solutions\n- **Primary Database**: PostgreSQL with Drizzle ORM for type-safe database interactions\n- **Database Provider**: Neon Database (serverless PostgreSQL)\n- **Schema Management**: Drizzle Kit for migrations and schema management\n- **Local Storage**: Browser localStorage for cart persistence and user preferences\n\n### Authentication and Authorization\n- **Primary Auth**: Firebase Authentication for secure user management\n- **Auth Methods**: Email/password authentication and Google OAuth integration\n- **Session Handling**: Firebase auth state management with persistent sessions\n- **User Data**: Hybrid approach combining Firebase user data with local PostgreSQL user profiles\n\n### Design System and Theming\n- **Dark Mode**: Complete dark/light theme system with CSS custom properties\n- **Animations**: Custom sparkle and confetti background animations that work in both themes\n- **Responsive Design**: Mobile-first approach with tablet and desktop breakpoints\n- **Component Variants**: Class Variance Authority (CVA) for consistent component styling\n\n## External Dependencies\n\n### Core Dependencies\n- **@neondatabase/serverless**: Serverless PostgreSQL client for database connections\n- **drizzle-orm**: Type-safe ORM with PostgreSQL dialect support\n- **@tanstack/react-query**: Server state management and caching\n- **firebase/auth**: Authentication services and Google OAuth provider\n\n### UI and Styling\n- **@radix-ui/***: Comprehensive collection of accessible UI primitives (dialogs, dropdowns, forms, etc.)\n- **tailwindcss**: Utility-first CSS framework for styling\n- **class-variance-authority**: Type-safe component variants\n- **clsx**: Conditional className utility\n\n### Development Tools\n- **vite**: Build tool and development server\n- **tsx**: TypeScript execution for server development\n- **@replit/vite-plugin-runtime-error-modal**: Development error handling\n- **@replit/vite-plugin-cartographer**: Development tooling for Replit environment\n\n### Form and Validation\n- **react-hook-form**: Form state management\n- **@hookform/resolvers**: Form validation resolvers\n- **drizzle-zod**: Schema validation integration\n\n### Additional Features\n- **date-fns**: Date manipulation utilities\n- **embla-carousel-react**: Carousel/slider components\n- **cmdk**: Command palette functionality","size_bytes":4016},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        sparkle: \"sparkle 3s ease-in-out infinite\",\n        float: \"float 6s ease-in-out infinite\",\n        shimmer: \"shimmer 2s ease-in-out infinite alternate\",\n        heartbeat: \"heartbeat 1.5s ease-in-out infinite\",\n        \"confetti-fall\": \"confetti-fall 3s linear infinite\",\n        glow: \"glow 2s ease-in-out infinite alternate\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        sparkle: {\n          \"0%, 100%\": { \n            opacity: \"0\", \n            transform: \"scale(0.8) rotate(0deg)\" \n          },\n          \"50%\": { \n            opacity: \"1\", \n            transform: \"scale(1.2) rotate(180deg)\" \n          },\n        },\n        float: {\n          \"0%, 100%\": { \n            transform: \"translateY(0px)\" \n          },\n          \"50%\": { \n            transform: \"translateY(-20px)\" \n          },\n        },\n        shimmer: {\n          \"0%\": { \n            opacity: \"0.5\" \n          },\n          \"100%\": { \n            opacity: \"1\" \n          },\n        },\n        heartbeat: {\n          \"0%, 100%\": { \n            transform: \"scale(1)\" \n          },\n          \"50%\": { \n            transform: \"scale(1.1)\" \n          },\n        },\n        \"confetti-fall\": {\n          \"0%\": { \n            transform: \"translateY(-100vh) rotate(0deg)\", \n            opacity: \"1\" \n          },\n          \"100%\": { \n            transform: \"translateY(100vh) rotate(360deg)\", \n            opacity: \"0\" \n          },\n        },\n        glow: {\n          \"0%\": { \n            \"box-shadow\": \"0 0 20px rgba(244, 196, 48, 0.5)\" \n          },\n          \"100%\": { \n            \"box-shadow\": \"0 0 30px rgba(244, 196, 48, 0.8)\" \n          },\n        },\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4351},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":473},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":993},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, boolean, decimal, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\"),\n  displayName: text(\"display_name\"),\n  photoURL: text(\"photo_url\"),\n  firebaseUid: text(\"firebase_uid\").unique(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const categories = pgTable(\"categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  icon: text(\"icon\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  originalPrice: decimal(\"original_price\", { precision: 10, scale: 2 }),\n  imageUrl: text(\"image_url\"),\n  images: jsonb(\"images\").$type<string[]>().default([]),\n  categoryId: varchar(\"category_id\").references(() => categories.id),\n  inStock: boolean(\"in_stock\").default(true),\n  stockQuantity: integer(\"stock_quantity\").default(0),\n  rating: decimal(\"rating\", { precision: 3, scale: 2 }).default(\"0\"),\n  reviewCount: integer(\"review_count\").default(0),\n  tags: jsonb(\"tags\").$type<string[]>().default([]),\n  features: jsonb(\"features\").$type<string[]>().default([]),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const cartItems = pgTable(\"cart_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  productId: varchar(\"product_id\").references(() => products.id),\n  quantity: integer(\"quantity\").default(1),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const wishlistItems = pgTable(\"wishlist_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  productId: varchar(\"product_id\").references(() => products.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const orders = pgTable(\"orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  status: text(\"status\").default(\"pending\"),\n  total: decimal(\"total\", { precision: 10, scale: 2 }).notNull(),\n  shippingAddress: jsonb(\"shipping_address\").$type<{\n    name: string;\n    address: string;\n    city: string;\n    state: string;\n    zipCode: string;\n    country: string;\n  }>(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const orderItems = pgTable(\"order_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: varchar(\"order_id\").references(() => orders.id),\n  productId: varchar(\"product_id\").references(() => products.id),\n  quantity: integer(\"quantity\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n});\n\nexport const reviews = pgTable(\"reviews\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  productId: varchar(\"product_id\").references(() => products.id),\n  rating: integer(\"rating\").notNull(),\n  comment: text(\"comment\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCartItemSchema = createInsertSchema(cartItems).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertWishlistItemSchema = createInsertSchema(wishlistItems).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertOrderItemSchema = createInsertSchema(orderItems).omit({\n  id: true,\n});\n\nexport const insertReviewSchema = createInsertSchema(reviews).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Category = typeof categories.$inferSelect;\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\n\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\n\nexport type CartItem = typeof cartItems.$inferSelect;\nexport type InsertCartItem = z.infer<typeof insertCartItemSchema>;\n\nexport type WishlistItem = typeof wishlistItems.$inferSelect;\nexport type InsertWishlistItem = z.infer<typeof insertWishlistItemSchema>;\n\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\n\nexport type OrderItem = typeof orderItems.$inferSelect;\nexport type InsertOrderItem = z.infer<typeof insertOrderItemSchema>;\n\nexport type Review = typeof reviews.$inferSelect;\nexport type InsertReview = z.infer<typeof insertReviewSchema>;\n","size_bytes":5599},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/contexts/ThemeContext\";\nimport { AuthProvider } from \"@/contexts/AuthContext\";\nimport { CartProvider } from \"@/contexts/CartContext\";\nimport { Navigation } from \"@/components/layout/Navigation\";\nimport { Footer } from \"@/components/layout/Footer\";\nimport { CartSidebar } from \"@/components/cart/CartSidebar\";\nimport { SparkleBackground } from \"@/components/animations/SparkleBackground\";\nimport { ConfettiBackground } from \"@/components/animations/ConfettiBackground\";\nimport Home from \"@/pages/Home\";\nimport Products from \"@/pages/Products\";\nimport ProductDetail from \"@/pages/ProductDetail\";\nimport Cart from \"@/pages/Cart\";\nimport Checkout from \"@/pages/Checkout\";\nimport Account from \"@/pages/Account\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/products\" component={Products} />\n      <Route path=\"/products/:id\" component={ProductDetail} />\n      <Route path=\"/cart\" component={Cart} />\n      <Route path=\"/checkout\" component={Checkout} />\n      <Route path=\"/account\" component={Account} />\n      <Route path=\"/wishlist\" component={() => <Account />} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <AuthProvider>\n          <CartProvider>\n            <TooltipProvider>\n              <div className=\"min-h-screen bg-background text-foreground relative overflow-x-hidden\">\n                {/* Background Animations */}\n                <SparkleBackground />\n                <ConfettiBackground />\n                \n                {/* Navigation */}\n                <Navigation />\n                \n                {/* Main Content */}\n                <main className=\"relative z-10\">\n                  <Router />\n                </main>\n                \n                {/* Footer */}\n                <Footer />\n                \n                {/* Cart Sidebar */}\n                <CartSidebar />\n                \n                {/* Toast Notifications */}\n                <Toaster />\n              </div>\n            </TooltipProvider>\n          </CartProvider>\n        </AuthProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2589},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;600;700&family=Montserrat:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(42, 15%, 97%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --primary: hsl(45, 93%, 47%);\n  --primary-foreground: hsl(20, 14.3%, 4.1%);\n  --secondary: hsl(348, 83%, 47%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --accent: hsl(45, 93%, 47%);\n  --accent-foreground: hsl(20, 14.3%, 4.1%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --ring: hsl(45, 93%, 47%);\n  --chart-1: hsl(45, 93%, 47%);\n  --chart-2: hsl(348, 83%, 47%);\n  --chart-3: hsl(42, 15%, 97%);\n  --chart-4: hsl(20, 14.3%, 4.1%);\n  --chart-5: hsl(25, 5.3%, 44.7%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(20, 14.3%, 4.1%);\n  --sidebar-primary: hsl(45, 93%, 47%);\n  --sidebar-primary-foreground: hsl(20, 14.3%, 4.1%);\n  --sidebar-accent: hsl(42, 15%, 97%);\n  --sidebar-accent-foreground: hsl(20, 14.3%, 4.1%);\n  --sidebar-border: hsl(20, 5.9%, 90%);\n  --sidebar-ring: hsl(45, 93%, 47%);\n  --font-sans: 'Montserrat', sans-serif;\n  --font-serif: 'Playfair Display', serif;\n  --font-mono: 'JetBrains Mono', monospace;\n  --radius: 0.75rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 3.1%);\n  --foreground: hsl(0, 0%, 98%);\n  --card: hsl(0, 0%, 7%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --popover: hsl(0, 0%, 3.1%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --primary: hsl(45, 93%, 47%);\n  --primary-foreground: hsl(0, 0%, 3.1%);\n  --secondary: hsl(348, 83%, 47%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(0, 0%, 14.9%);\n  --muted-foreground: hsl(0, 0%, 63.9%);\n  --accent: hsl(45, 93%, 47%);\n  --accent-foreground: hsl(0, 0%, 3.1%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(0, 0%, 14.9%);\n  --input: hsl(0, 0%, 14.9%);\n  --ring: hsl(45, 93%, 47%);\n  --chart-1: hsl(45, 93%, 47%);\n  --chart-2: hsl(348, 83%, 47%);\n  --chart-3: hsl(0, 0%, 3.1%);\n  --chart-4: hsl(0, 0%, 98%);\n  --chart-5: hsl(0, 0%, 63.9%);\n  --sidebar: hsl(0, 0%, 7%);\n  --sidebar-foreground: hsl(0, 0%, 98%);\n  --sidebar-primary: hsl(45, 93%, 47%);\n  --sidebar-primary-foreground: hsl(0, 0%, 3.1%);\n  --sidebar-accent: hsl(0, 0%, 14.9%);\n  --sidebar-accent-foreground: hsl(0, 0%, 98%);\n  --sidebar-border: hsl(0, 0%, 14.9%);\n  --sidebar-ring: hsl(45, 93%, 47%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    transition: all 0.3s ease;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    @apply font-serif;\n  }\n}\n\n@layer components {\n  .glass-card {\n    background: rgba(255, 255, 255, 0.1);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n    box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);\n  }\n\n  .dark .glass-card {\n    background: rgba(0, 0, 0, 0.3);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n    box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.5);\n  }\n\n  .btn-primary {\n    @apply bg-gradient-to-r from-primary to-accent text-primary-foreground font-semibold transition-all duration-300;\n  }\n\n  .btn-primary:hover {\n    @apply shadow-lg transform -translate-y-1;\n    box-shadow: 0 0 20px rgba(244, 196, 48, 0.5);\n  }\n\n  .nav-blur {\n    background: rgba(255, 248, 240, 0.8);\n    backdrop-filter: blur(20px);\n    border-bottom: 1px solid rgba(244, 196, 48, 0.2);\n  }\n\n  .dark .nav-blur {\n    background: rgba(8, 8, 8, 0.9);\n    border-bottom: 1px solid rgba(244, 196, 48, 0.3);\n  }\n\n  .hero-gradient {\n    background: linear-gradient(135deg, \n      hsl(var(--background)) 0%, \n      rgba(244, 196, 48, 0.1) 50%, \n      hsl(var(--background)) 100%);\n  }\n\n  .dark .hero-gradient {\n    background: linear-gradient(135deg, \n      hsl(var(--background)) 0%, \n      rgba(244, 196, 48, 0.05) 50%, \n      hsl(var(--background)) 100%);\n  }\n\n  .product-card:hover {\n    @apply transform -translate-y-2 scale-105;\n    transition: all 0.3s ease;\n  }\n\n  .product-card:hover .product-image {\n    @apply transform scale-110;\n    transition: transform 0.3s ease;\n  }\n}\n\n@layer utilities {\n  .animate-sparkle {\n    animation: sparkle 3s ease-in-out infinite;\n  }\n\n  .animate-float {\n    animation: float 6s ease-in-out infinite;\n  }\n\n  .animate-shimmer {\n    animation: shimmer 2s ease-in-out infinite alternate;\n  }\n\n  .animate-heartbeat {\n    animation: heartbeat 1.5s ease-in-out infinite;\n  }\n\n  .animate-confetti-fall {\n    animation: confetti-fall 3s linear infinite;\n  }\n\n  .animate-glow {\n    animation: glow 2s ease-in-out infinite alternate;\n  }\n}\n\n@keyframes sparkle {\n  0%, 100% { \n    opacity: 0; \n    transform: scale(0.8) rotate(0deg); \n  }\n  50% { \n    opacity: 1; \n    transform: scale(1.2) rotate(180deg); \n  }\n}\n\n@keyframes float {\n  0%, 100% { \n    transform: translateY(0px); \n  }\n  50% { \n    transform: translateY(-20px); \n  }\n}\n\n@keyframes shimmer {\n  0% { \n    opacity: 0.5; \n  }\n  100% { \n    opacity: 1; \n  }\n}\n\n@keyframes heartbeat {\n  0%, 100% { \n    transform: scale(1); \n  }\n  50% { \n    transform: scale(1.1); \n  }\n}\n\n@keyframes confetti-fall {\n  0% { \n    transform: translateY(-100vh) rotate(0deg); \n    opacity: 1; \n  }\n  100% { \n    transform: translateY(100vh) rotate(360deg); \n    opacity: 0; \n  }\n}\n\n@keyframes glow {\n  0% { \n    box-shadow: 0 0 20px rgba(244, 196, 48, 0.5); \n  }\n  100% { \n    box-shadow: 0 0 30px rgba(244, 196, 48, 0.8); \n  }\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: hsl(var(--muted));\n}\n\n::-webkit-scrollbar-thumb {\n  background: hsl(var(--primary));\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: hsl(var(--accent));\n}\n","size_bytes":6069},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/contexts/AuthContext.tsx":{"content":"import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { \n  User as FirebaseUser, \n  signInWithEmailAndPassword, \n  createUserWithEmailAndPassword,\n  signInWithRedirect,\n  getRedirectResult,\n  signOut,\n  onAuthStateChanged\n} from 'firebase/auth';\nimport { auth, googleProvider } from '@/lib/firebase';\nimport { User } from '@/types';\n\ninterface AuthContextType {\n  user: User | null;\n  firebaseUser: FirebaseUser | null;\n  loading: boolean;\n  signIn: (email: string, password: string) => Promise<void>;\n  signUp: (email: string, password: string, displayName: string) => Promise<void>;\n  signInWithGoogle: () => Promise<void>;\n  logout: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [firebaseUser, setFirebaseUser] = useState<FirebaseUser | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {\n      setFirebaseUser(firebaseUser);\n      if (firebaseUser) {\n        // Here you would typically fetch the user data from your backend\n        // For now, we'll create a user object from Firebase user\n        const userData: User = {\n          id: firebaseUser.uid,\n          email: firebaseUser.email || '',\n          displayName: firebaseUser.displayName || '',\n          photoURL: firebaseUser.photoURL || '',\n          firebaseUid: firebaseUser.uid,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n        };\n        setUser(userData);\n      } else {\n        setUser(null);\n      }\n      setLoading(false);\n    });\n\n    // Handle redirect result for Google sign-in\n    getRedirectResult(auth).catch(console.error);\n\n    return unsubscribe;\n  }, []);\n\n  const signIn = async (email: string, password: string) => {\n    await signInWithEmailAndPassword(auth, email, password);\n  };\n\n  const signUp = async (email: string, password: string, displayName: string) => {\n    const result = await createUserWithEmailAndPassword(auth, email, password);\n    // You would typically save the user to your backend here\n  };\n\n  const signInWithGoogle = async () => {\n    await signInWithRedirect(auth, googleProvider);\n  };\n\n  const logout = async () => {\n    await signOut(auth);\n  };\n\n  return (\n    <AuthContext.Provider value={{\n      user,\n      firebaseUser,\n      loading,\n      signIn,\n      signUp,\n      signInWithGoogle,\n      logout\n    }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n","size_bytes":2859},"client/src/contexts/CartContext.tsx":{"content":"import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { CartItem, Product } from '@/types';\nimport { useAuth } from './AuthContext';\n\ninterface CartContextType {\n  items: CartItem[];\n  isOpen: boolean;\n  setIsOpen: (open: boolean) => void;\n  addItem: (product: Product, quantity?: number) => void;\n  removeItem: (productId: string) => void;\n  updateQuantity: (productId: string, quantity: number) => void;\n  clearCart: () => void;\n  totalItems: number;\n  subtotal: number;\n}\n\nconst CartContext = createContext<CartContextType | undefined>(undefined);\n\nexport function CartProvider({ children }: { children: React.ReactNode }) {\n  const { user } = useAuth();\n  const [items, setItems] = useState<CartItem[]>([]);\n  const [isOpen, setIsOpen] = useState(false);\n\n  // Load cart from localStorage when user changes\n  useEffect(() => {\n    if (user) {\n      const savedCart = localStorage.getItem(`cart_${user.id}`);\n      if (savedCart) {\n        setItems(JSON.parse(savedCart));\n      }\n    } else {\n      setItems([]);\n    }\n  }, [user]);\n\n  // Save cart to localStorage whenever items change\n  useEffect(() => {\n    if (user && items.length > 0) {\n      localStorage.setItem(`cart_${user.id}`, JSON.stringify(items));\n    }\n  }, [items, user]);\n\n  const addItem = (product: Product, quantity = 1) => {\n    if (!user) return;\n\n    setItems(prevItems => {\n      const existingItem = prevItems.find(item => item.productId === product.id);\n      \n      if (existingItem) {\n        return prevItems.map(item =>\n          item.productId === product.id\n            ? { ...item, quantity: item.quantity + quantity }\n            : item\n        );\n      } else {\n        const newItem: CartItem = {\n          id: Date.now().toString(),\n          userId: user.id,\n          productId: product.id,\n          product,\n          quantity,\n          createdAt: new Date().toISOString(),\n        };\n        return [...prevItems, newItem];\n      }\n    });\n  };\n\n  const removeItem = (productId: string) => {\n    setItems(prevItems => prevItems.filter(item => item.productId !== productId));\n  };\n\n  const updateQuantity = (productId: string, quantity: number) => {\n    if (quantity <= 0) {\n      removeItem(productId);\n      return;\n    }\n\n    setItems(prevItems =>\n      prevItems.map(item =>\n        item.productId === productId\n          ? { ...item, quantity }\n          : item\n      )\n    );\n  };\n\n  const clearCart = () => {\n    setItems([]);\n    if (user) {\n      localStorage.removeItem(`cart_${user.id}`);\n    }\n  };\n\n  const totalItems = items.reduce((total, item) => total + item.quantity, 0);\n  const subtotal = items.reduce((total, item) => {\n    const price = item.product?.price || 0;\n    return total + (price * item.quantity);\n  }, 0);\n\n  return (\n    <CartContext.Provider value={{\n      items,\n      isOpen,\n      setIsOpen,\n      addItem,\n      removeItem,\n      updateQuantity,\n      clearCart,\n      totalItems,\n      subtotal\n    }}>\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart() {\n  const context = useContext(CartContext);\n  if (context === undefined) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n}\n","size_bytes":3217},"client/src/contexts/ThemeContext.tsx":{"content":"import React, { createContext, useContext, useEffect, useState } from 'react';\n\ninterface ThemeContextType {\n  isDarkMode: boolean;\n  toggleDarkMode: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [isDarkMode, setIsDarkMode] = useState(() => {\n    const stored = localStorage.getItem('theme');\n    return stored === 'dark';\n  });\n\n  useEffect(() => {\n    const root = document.documentElement;\n    if (isDarkMode) {\n      root.classList.add('dark');\n    } else {\n      root.classList.remove('dark');\n    }\n    localStorage.setItem('theme', isDarkMode ? 'dark' : 'light');\n  }, [isDarkMode]);\n\n  const toggleDarkMode = () => {\n    setIsDarkMode(prev => !prev);\n  };\n\n  return (\n    <ThemeContext.Provider value={{ isDarkMode, toggleDarkMode }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}\n","size_bytes":1126},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useContext } from 'react';\nimport { AuthContext } from '@/contexts/AuthContext';\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n","size_bytes":285},"client/src/hooks/useCart.ts":{"content":"import { useContext } from 'react';\nimport { CartContext } from '@/contexts/CartContext';\n\nexport function useCart() {\n  const context = useContext(CartContext);\n  if (context === undefined) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n}\n","size_bytes":284},"client/src/hooks/useProducts.ts":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Product, SearchFilters } from '@/types';\n\n// Mock data for demonstration - in real app this would come from Firebase\nconst mockProducts: Product[] = [\n  {\n    id: '1',\n    name: 'Luxury Chocolate Collection',\n    description: 'Handcrafted Belgian chocolates in elegant packaging',\n    price: 89.99,\n    originalPrice: 119.99,\n    imageUrl: 'https://images.unsplash.com/photo-1549298916-b41d501d3772?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=600',\n    images: ['https://images.unsplash.com/photo-1549298916-b41d501d3772?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=600'],\n    categoryId: 'chocolates',\n    inStock: true,\n    stockQuantity: 50,\n    rating: 4.8,\n    reviewCount: 127,\n    tags: ['Bestseller'],\n    features: ['Belgian chocolate', 'Elegant packaging', 'Perfect for gifts'],\n    createdAt: '2024-01-01T00:00:00Z',\n    updatedAt: '2024-01-01T00:00:00Z',\n  },\n  {\n    id: '2',\n    name: 'Royal Rose Bouquet',\n    description: 'Fresh roses with premium packaging and care card',\n    price: 64.99,\n    imageUrl: 'https://images.unsplash.com/photo-1520763185298-1b434c919102?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=600',\n    images: ['https://images.unsplash.com/photo-1520763185298-1b434c919102?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=600'],\n    categoryId: 'flowers',\n    inStock: true,\n    stockQuantity: 25,\n    rating: 4.6,\n    reviewCount: 89,\n    tags: ['Premium'],\n    features: ['Fresh flowers', 'Premium packaging', 'Care instructions'],\n    createdAt: '2024-01-01T00:00:00Z',\n    updatedAt: '2024-01-01T00:00:00Z',\n  },\n  {\n    id: '3',\n    name: 'Elegant Jewelry Set',\n    description: 'Sterling silver necklace and earrings with personalization',\n    price: 149.99,\n    originalPrice: 199.99,\n    imageUrl: 'https://images.unsplash.com/photo-1515562141207-7a88fb7ce338?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=600',\n    images: ['https://images.unsplash.com/photo-1515562141207-7a88fb7ce338?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=600'],\n    categoryId: 'jewelry',\n    inStock: true,\n    stockQuantity: 15,\n    rating: 4.9,\n    reviewCount: 203,\n    tags: ['Limited'],\n    features: ['Sterling silver', 'Personalization available', 'Gift box included'],\n    createdAt: '2024-01-01T00:00:00Z',\n    updatedAt: '2024-01-01T00:00:00Z',\n  },\n  {\n    id: '4',\n    name: 'Luxury Spa Collection',\n    description: 'Complete aromatherapy and wellness gift basket',\n    price: 79.99,\n    imageUrl: 'https://images.unsplash.com/photo-1544161515-4ab6ce6db874?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=600',\n    images: ['https://images.unsplash.com/photo-1544161515-4ab6ce6db874?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=600'],\n    categoryId: 'spa',\n    inStock: true,\n    stockQuantity: 30,\n    rating: 4.4,\n    reviewCount: 45,\n    tags: ['New'],\n    features: ['Aromatherapy products', 'Wellness items', 'Beautiful basket'],\n    createdAt: '2024-01-01T00:00:00Z',\n    updatedAt: '2024-01-01T00:00:00Z',\n  },\n];\n\nexport function useProducts(filters?: SearchFilters) {\n  return useQuery({\n    queryKey: ['products', filters],\n    queryFn: async () => {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      let filteredProducts = [...mockProducts];\n\n      if (filters?.query) {\n        const query = filters.query.toLowerCase();\n        filteredProducts = filteredProducts.filter(product =>\n          product.name.toLowerCase().includes(query) ||\n          product.description.toLowerCase().includes(query) ||\n          product.tags.some(tag => tag.toLowerCase().includes(query))\n        );\n      }\n\n      if (filters?.category && filters.category !== 'all') {\n        filteredProducts = filteredProducts.filter(product =>\n          product.categoryId === filters.category\n        );\n      }\n\n      if (filters?.priceRange && filters.priceRange !== 'all') {\n        const [min, max] = filters.priceRange.split('-').map(Number);\n        if (max) {\n          filteredProducts = filteredProducts.filter(product =>\n            product.price >= min && product.price <= max\n          );\n        } else {\n          filteredProducts = filteredProducts.filter(product =>\n            product.price >= min\n          );\n        }\n      }\n\n      if (filters?.availability && filters.availability !== 'all') {\n        switch (filters.availability) {\n          case 'in-stock':\n            filteredProducts = filteredProducts.filter(product => product.inStock);\n            break;\n          case 'low-stock':\n            filteredProducts = filteredProducts.filter(product => \n              product.inStock && product.stockQuantity <= 10\n            );\n            break;\n        }\n      }\n\n      if (filters?.sortBy) {\n        switch (filters.sortBy) {\n          case 'price-low':\n            filteredProducts.sort((a, b) => a.price - b.price);\n            break;\n          case 'price-high':\n            filteredProducts.sort((a, b) => b.price - a.price);\n            break;\n          case 'rating':\n            filteredProducts.sort((a, b) => b.rating - a.rating);\n            break;\n          case 'name':\n            filteredProducts.sort((a, b) => a.name.localeCompare(b.name));\n            break;\n          case 'newest':\n            filteredProducts.sort((a, b) => \n              new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n            );\n            break;\n          default:\n            // 'popular' or default\n            filteredProducts.sort((a, b) => b.reviewCount - a.reviewCount);\n        }\n      }\n\n      return filteredProducts;\n    },\n  });\n}\n\nexport function useProduct(id: string) {\n  return useQuery({\n    queryKey: ['product', id],\n    queryFn: async () => {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      \n      const product = mockProducts.find(p => p.id === id);\n      if (!product) {\n        throw new Error('Product not found');\n      }\n      return product;\n    },\n  });\n}\n","size_bytes":6395},"client/src/lib/firebase.ts":{"content":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, GoogleAuthProvider } from \"firebase/auth\";\nimport { getFirestore } from \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_API_KEY || \"demo-api-key\",\n  authDomain: `${import.meta.env.VITE_FIREBASE_PROJECT_ID || \"demo-project\"}.firebaseapp.com`,\n  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID || \"demo-project\",\n  storageBucket: `${import.meta.env.VITE_FIREBASE_PROJECT_ID || \"demo-project\"}.firebasestorage.app`,\n  appId: import.meta.env.VITE_FIREBASE_APP_ID || \"demo-app-id\",\n};\n\nexport const app = initializeApp(firebaseConfig);\nexport const auth = getAuth(app);\nexport const db = getFirestore(app);\nexport const googleProvider = new GoogleAuthProvider();\n","size_bytes":766},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Account.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Link } from 'wouter';\nimport { User, Heart, Package, Settings, LogOut, Edit, Moon, Sun, Star, Eye } from 'lucide-react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useTheme } from '@/contexts/ThemeContext';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Separator } from '@/components/ui/separator';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface Order {\n  id: string;\n  date: string;\n  status: 'delivered' | 'shipped' | 'processing' | 'cancelled';\n  total: number;\n  items: Array<{\n    id: string;\n    name: string;\n    image: string;\n    quantity: number;\n    price: number;\n  }>;\n}\n\ninterface WishlistItem {\n  id: string;\n  name: string;\n  price: number;\n  image: string;\n  inStock: boolean;\n}\n\nexport default function Account() {\n  const { user, logout } = useAuth();\n  const { isDarkMode, toggleDarkMode } = useTheme();\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState('profile');\n  const [isEditing, setIsEditing] = useState(false);\n  const [profileData, setProfileData] = useState({\n    displayName: user?.displayName || '',\n    email: user?.email || '',\n    phone: '',\n    address: '',\n    city: '',\n    state: '',\n    zipCode: '',\n  });\n\n  // Parse URL hash for tab\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const tab = urlParams.get('tab');\n    if (tab && ['profile', 'orders', 'wishlist', 'settings'].includes(tab)) {\n      setActiveTab(tab);\n    }\n  }, []);\n\n  // Mock data - in real app this would come from Firebase\n  const mockOrders: Order[] = [\n    {\n      id: '12034',\n      date: '2024-01-15',\n      status: 'delivered',\n      total: 189.97,\n      items: [\n        {\n          id: '1',\n          name: 'Luxury Chocolate Collection',\n          image: 'https://images.unsplash.com/photo-1549298916-b41d501d3772?w=100&h=100&fit=crop',\n          quantity: 2,\n          price: 89.99,\n        },\n        {\n          id: '2',\n          name: 'Royal Rose Bouquet',\n          image: 'https://images.unsplash.com/photo-1520763185298-1b434c919102?w=100&h=100&fit=crop',\n          quantity: 1,\n          price: 64.99,\n        },\n      ],\n    },\n    {\n      id: '11987',\n      date: '2024-01-10',\n      status: 'shipped',\n      total: 124.98,\n      items: [\n        {\n          id: '3',\n          name: 'Elegant Jewelry Set',\n          image: 'https://images.unsplash.com/photo-1515562141207-7a88fb7ce338?w=100&h=100&fit=crop',\n          quantity: 1,\n          price: 149.99,\n        },\n      ],\n    },\n  ];\n\n  const mockWishlist: WishlistItem[] = [\n    {\n      id: '2',\n      name: 'Royal Rose Bouquet',\n      price: 64.99,\n      image: 'https://images.unsplash.com/photo-1520763185298-1b434c919102?w=100&h=100&fit=crop',\n      inStock: true,\n    },\n    {\n      id: '4',\n      name: 'Luxury Spa Collection',\n      price: 79.99,\n      image: 'https://images.unsplash.com/photo-1544161515-4ab6ce6db874?w=100&h=100&fit=crop',\n      inStock: true,\n    },\n  ];\n\n  if (!user) {\n    return (\n      <div className=\"pt-20\" data-testid=\"account-signin-required\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-16 text-center\">\n          <div className=\"text-6xl mb-4 opacity-50\">🔒</div>\n          <h1 className=\"text-2xl font-serif font-bold text-foreground mb-4\">\n            Sign In Required\n          </h1>\n          <p className=\"text-muted-foreground mb-8\">\n            Please sign in to access your account.\n          </p>\n          <Link href=\"/\">\n            <Button className=\"btn-primary\" data-testid=\"button-back-to-home\">\n              Back to Home\n            </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  const handleProfileSave = () => {\n    setIsEditing(false);\n    toast({\n      title: 'Profile updated',\n      description: 'Your profile information has been saved successfully.',\n    });\n  };\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n      toast({\n        title: 'Signed out',\n        description: 'You have been successfully signed out.',\n      });\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'Failed to sign out. Please try again.',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'delivered':\n        return 'bg-green-500 text-white';\n      case 'shipped':\n        return 'bg-blue-500 text-white';\n      case 'processing':\n        return 'bg-yellow-500 text-black';\n      case 'cancelled':\n        return 'bg-red-500 text-white';\n      default:\n        return 'bg-gray-500 text-white';\n    }\n  };\n\n  return (\n    <div className=\"pt-20\" data-testid=\"page-account\">\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-serif font-bold text-foreground\">My Account</h1>\n            <p className=\"text-muted-foreground\">Manage your profile, orders, and preferences</p>\n          </div>\n          <Button \n            variant=\"outline\" \n            onClick={handleLogout}\n            className=\"text-destructive hover:text-destructive\"\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"w-4 h-4 mr-2\" />\n            Sign Out\n          </Button>\n        </div>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"profile\" className=\"flex items-center space-x-2\" data-testid=\"tab-profile\">\n              <User className=\"w-4 h-4\" />\n              <span>Profile</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"orders\" className=\"flex items-center space-x-2\" data-testid=\"tab-orders\">\n              <Package className=\"w-4 h-4\" />\n              <span>Orders</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"wishlist\" className=\"flex items-center space-x-2\" data-testid=\"tab-wishlist\">\n              <Heart className=\"w-4 h-4\" />\n              <span>Wishlist</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"settings\" className=\"flex items-center space-x-2\" data-testid=\"tab-settings\">\n              <Settings className=\"w-4 h-4\" />\n              <span>Settings</span>\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Profile Tab */}\n          <TabsContent value=\"profile\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n              {/* Profile Overview */}\n              <div className=\"glass-card p-8 rounded-2xl\">\n                <div className=\"text-center mb-6\">\n                  <div className=\"w-24 h-24 mx-auto bg-primary rounded-full flex items-center justify-center text-3xl text-primary-foreground mb-4\">\n                    {user.photoURL ? (\n                      <img\n                        src={user.photoURL}\n                        alt={user.displayName || 'User'}\n                        className=\"w-24 h-24 rounded-full object-cover\"\n                        data-testid=\"img-user-avatar\"\n                      />\n                    ) : (\n                      <User className=\"w-8 h-8\" />\n                    )}\n                  </div>\n                  <h3 className=\"text-xl font-serif font-bold text-foreground\" data-testid=\"text-user-name\">\n                    {user.displayName || 'User'}\n                  </h3>\n                  <p className=\"text-muted-foreground\" data-testid=\"text-user-email\">{user.email}</p>\n                </div>\n                \n                {/* Quick Stats */}\n                <div className=\"grid grid-cols-2 gap-4 mb-6\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-primary\" data-testid=\"text-total-orders\">\n                      {mockOrders.length}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Total Orders</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-secondary\" data-testid=\"text-wishlist-items\">\n                      {mockWishlist.length}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Wishlist Items</div>\n                  </div>\n                </div>\n\n                <Button\n                  onClick={() => setIsEditing(!isEditing)}\n                  variant=\"outline\"\n                  className=\"w-full\"\n                  data-testid=\"button-edit-profile\"\n                >\n                  <Edit className=\"w-4 h-4 mr-2\" />\n                  {isEditing ? 'Cancel Edit' : 'Edit Profile'}\n                </Button>\n              </div>\n\n              {/* Profile Form */}\n              <div className=\"lg:col-span-2 glass-card p-8 rounded-2xl\">\n                <h3 className=\"text-xl font-serif font-bold mb-6\">Profile Information</h3>\n                \n                <div className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"displayName\">Display Name</Label>\n                      <Input\n                        id=\"displayName\"\n                        value={profileData.displayName}\n                        onChange={(e) => setProfileData(prev => ({ ...prev, displayName: e.target.value }))}\n                        disabled={!isEditing}\n                        data-testid=\"input-display-name\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"email\">Email</Label>\n                      <Input\n                        id=\"email\"\n                        type=\"email\"\n                        value={profileData.email}\n                        disabled\n                        data-testid=\"input-email\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"phone\">Phone Number</Label>\n                      <Input\n                        id=\"phone\"\n                        value={profileData.phone}\n                        onChange={(e) => setProfileData(prev => ({ ...prev, phone: e.target.value }))}\n                        disabled={!isEditing}\n                        data-testid=\"input-phone\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"address\">Address</Label>\n                      <Input\n                        id=\"address\"\n                        value={profileData.address}\n                        onChange={(e) => setProfileData(prev => ({ ...prev, address: e.target.value }))}\n                        disabled={!isEditing}\n                        data-testid=\"input-address\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <div>\n                      <Label htmlFor=\"city\">City</Label>\n                      <Input\n                        id=\"city\"\n                        value={profileData.city}\n                        onChange={(e) => setProfileData(prev => ({ ...prev, city: e.target.value }))}\n                        disabled={!isEditing}\n                        data-testid=\"input-city\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"state\">State</Label>\n                      <Input\n                        id=\"state\"\n                        value={profileData.state}\n                        onChange={(e) => setProfileData(prev => ({ ...prev, state: e.target.value }))}\n                        disabled={!isEditing}\n                        data-testid=\"input-state\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"zipCode\">ZIP Code</Label>\n                      <Input\n                        id=\"zipCode\"\n                        value={profileData.zipCode}\n                        onChange={(e) => setProfileData(prev => ({ ...prev, zipCode: e.target.value }))}\n                        disabled={!isEditing}\n                        data-testid=\"input-zip\"\n                      />\n                    </div>\n                  </div>\n\n                  {isEditing && (\n                    <div className=\"flex space-x-4\">\n                      <Button \n                        onClick={handleProfileSave}\n                        className=\"btn-primary flex-1\"\n                        data-testid=\"button-save-profile\"\n                      >\n                        Save Changes\n                      </Button>\n                      <Button \n                        variant=\"outline\" \n                        onClick={() => setIsEditing(false)}\n                        className=\"flex-1\"\n                        data-testid=\"button-cancel-edit\"\n                      >\n                        Cancel\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </TabsContent>\n\n          {/* Orders Tab */}\n          <TabsContent value=\"orders\" className=\"space-y-6\">\n            <div className=\"glass-card p-8 rounded-2xl\">\n              <h3 className=\"text-xl font-serif font-bold mb-6\">Order History</h3>\n              \n              {mockOrders.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <div className=\"text-6xl mb-4 opacity-50\">📦</div>\n                  <h4 className=\"text-lg font-semibold text-foreground mb-2\">No orders yet</h4>\n                  <p className=\"text-muted-foreground mb-6\">Start shopping to see your orders here</p>\n                  <Link href=\"/products\">\n                    <Button className=\"btn-primary\" data-testid=\"button-start-shopping\">\n                      Start Shopping\n                    </Button>\n                  </Link>\n                </div>\n              ) : (\n                <div className=\"space-y-6\">\n                  {mockOrders.map((order) => (\n                    <div key={order.id} className=\"border border-border rounded-lg p-6\" data-testid={`order-${order.id}`}>\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <div>\n                          <h4 className=\"font-semibold text-foreground\">Order #{order.id}</h4>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Placed on {new Date(order.date).toLocaleDateString()}\n                          </p>\n                        </div>\n                        <div className=\"text-right\">\n                          <Badge className={getStatusColor(order.status)} data-testid=\"badge-order-status\">\n                            {order.status.charAt(0).toUpperCase() + order.status.slice(1)}\n                          </Badge>\n                          <p className=\"text-lg font-semibold text-foreground mt-1\" data-testid=\"text-order-total\">\n                            ${order.total.toFixed(2)}\n                          </p>\n                        </div>\n                      </div>\n\n                      <div className=\"space-y-3\">\n                        {order.items.map((item) => (\n                          <div key={item.id} className=\"flex items-center space-x-4\">\n                            <img\n                              src={item.image}\n                              alt={item.name}\n                              className=\"w-12 h-12 object-cover rounded-lg\"\n                              data-testid=\"img-order-item\"\n                            />\n                            <div className=\"flex-1\">\n                              <h5 className=\"font-medium text-foreground\" data-testid=\"text-item-name\">\n                                {item.name}\n                              </h5>\n                              <p className=\"text-sm text-muted-foreground\">\n                                Quantity: {item.quantity} • ${item.price.toFixed(2)} each\n                              </p>\n                            </div>\n                            <div className=\"text-right\">\n                              <p className=\"font-semibold text-foreground\">\n                                ${(item.price * item.quantity).toFixed(2)}\n                              </p>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n\n                      <Separator className=\"my-4\" />\n\n                      <div className=\"flex space-x-4\">\n                        <Button variant=\"outline\" size=\"sm\" data-testid=\"button-view-order\">\n                          <Eye className=\"w-4 h-4 mr-2\" />\n                          View Details\n                        </Button>\n                        {order.status === 'delivered' && (\n                          <Button variant=\"outline\" size=\"sm\" data-testid=\"button-reorder\">\n                            Reorder\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          </TabsContent>\n\n          {/* Wishlist Tab */}\n          <TabsContent value=\"wishlist\" className=\"space-y-6\">\n            <div className=\"glass-card p-8 rounded-2xl\">\n              <h3 className=\"text-xl font-serif font-bold mb-6\">Your Wishlist</h3>\n              \n              {mockWishlist.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <div className=\"text-6xl mb-4 opacity-50\">💖</div>\n                  <h4 className=\"text-lg font-semibold text-foreground mb-2\">No items in wishlist</h4>\n                  <p className=\"text-muted-foreground mb-6\">Save items you love to buy them later</p>\n                  <Link href=\"/products\">\n                    <Button className=\"btn-primary\" data-testid=\"button-browse-products\">\n                      Browse Products\n                    </Button>\n                  </Link>\n                </div>\n              ) : (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {mockWishlist.map((item) => (\n                    <div key={item.id} className=\"border border-border rounded-lg p-4\" data-testid={`wishlist-item-${item.id}`}>\n                      <Link href={`/products/${item.id}`}>\n                        <img\n                          src={item.image}\n                          alt={item.name}\n                          className=\"w-full h-40 object-cover rounded-lg mb-4 hover:scale-105 transition-transform duration-200\"\n                          data-testid=\"img-wishlist-item\"\n                        />\n                      </Link>\n                      <div className=\"space-y-3\">\n                        <div>\n                          <h4 className=\"font-semibold text-foreground line-clamp-2\" data-testid=\"text-wishlist-item-name\">\n                            {item.name}\n                          </h4>\n                          <p className=\"text-primary font-semibold\" data-testid=\"text-wishlist-item-price\">\n                            ${item.price.toFixed(2)}\n                          </p>\n                        </div>\n                        \n                        <div className=\"flex space-x-2\">\n                          <Button\n                            className=\"btn-primary flex-1\"\n                            disabled={!item.inStock}\n                            data-testid=\"button-add-to-cart-wishlist\"\n                          >\n                            {item.inStock ? 'Add to Cart' : 'Out of Stock'}\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"icon\"\n                            className=\"text-destructive hover:text-destructive\"\n                            data-testid=\"button-remove-wishlist\"\n                          >\n                            <Heart className=\"w-4 h-4 fill-current\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          </TabsContent>\n\n          {/* Settings Tab */}\n          <TabsContent value=\"settings\" className=\"space-y-6\">\n            <div className=\"glass-card p-8 rounded-2xl\">\n              <h3 className=\"text-xl font-serif font-bold mb-6\">Account Settings</h3>\n              \n              <div className=\"space-y-6\">\n                {/* Dark Mode Toggle */}\n                <div className=\"flex items-center justify-between p-4 border border-border rounded-lg\">\n                  <div className=\"flex items-center space-x-3\">\n                    {isDarkMode ? <Moon className=\"w-5 h-5\" /> : <Sun className=\"w-5 h-5\" />}\n                    <div>\n                      <h4 className=\"font-semibold\">Dark Mode</h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Toggle between light and dark themes\n                      </p>\n                    </div>\n                  </div>\n                  <Button\n                    variant=\"outline\"\n                    onClick={toggleDarkMode}\n                    data-testid=\"button-toggle-dark-mode\"\n                  >\n                    {isDarkMode ? 'Disable' : 'Enable'}\n                  </Button>\n                </div>\n\n                {/* Email Notifications */}\n                <div className=\"flex items-center justify-between p-4 border border-border rounded-lg\">\n                  <div>\n                    <h4 className=\"font-semibold\">Email Notifications</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Receive updates about your orders and promotions\n                    </p>\n                  </div>\n                  <Button variant=\"outline\" data-testid=\"button-email-settings\">\n                    Manage\n                  </Button>\n                </div>\n\n                {/* Privacy Settings */}\n                <div className=\"flex items-center justify-between p-4 border border-border rounded-lg\">\n                  <div>\n                    <h4 className=\"font-semibold\">Privacy Settings</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Control how your data is used and shared\n                    </p>\n                  </div>\n                  <Button variant=\"outline\" data-testid=\"button-privacy-settings\">\n                    Configure\n                  </Button>\n                </div>\n\n                {/* Change Password */}\n                <div className=\"flex items-center justify-between p-4 border border-border rounded-lg\">\n                  <div>\n                    <h4 className=\"font-semibold\">Change Password</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Update your account password for security\n                    </p>\n                  </div>\n                  <Button variant=\"outline\" data-testid=\"button-change-password\">\n                    Change\n                  </Button>\n                </div>\n\n                {/* Delete Account */}\n                <div className=\"flex items-center justify-between p-4 border border-destructive rounded-lg\">\n                  <div>\n                    <h4 className=\"font-semibold text-destructive\">Delete Account</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Permanently delete your account and all data\n                    </p>\n                  </div>\n                  <Button variant=\"destructive\" data-testid=\"button-delete-account\">\n                    Delete\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":24517},"client/src/pages/Cart.tsx":{"content":"import React from 'react';\nimport { Link } from 'wouter';\nimport { ArrowLeft, Plus, Minus, Trash2, ShoppingBag, Heart } from 'lucide-react';\nimport { useCart } from '@/contexts/CartContext';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { Button } from '@/components/ui/button';\nimport { Separator } from '@/components/ui/separator';\nimport { Badge } from '@/components/ui/badge';\n\nexport default function Cart() {\n  const { items, updateQuantity, removeItem, totalItems, subtotal, clearCart } = useCart();\n  const { user } = useAuth();\n\n  if (!user) {\n    return (\n      <div className=\"pt-20\" data-testid=\"cart-signin-required\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-16 text-center\">\n          <div className=\"text-6xl mb-4 opacity-50\">🔒</div>\n          <h1 className=\"text-2xl font-serif font-bold text-foreground mb-4\">\n            Sign In Required\n          </h1>\n          <p className=\"text-muted-foreground mb-8\">\n            Please sign in to view and manage your shopping cart.\n          </p>\n          <Link href=\"/\">\n            <Button className=\"btn-primary\" data-testid=\"button-back-to-home\">\n              Back to Home\n            </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  if (items.length === 0) {\n    return (\n      <div className=\"pt-20\" data-testid=\"cart-empty\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n          {/* Header */}\n          <div className=\"flex items-center mb-8\">\n            <Link href=\"/products\">\n              <Button variant=\"ghost\" size=\"icon\" className=\"mr-4\" data-testid=\"button-back\">\n                <ArrowLeft className=\"w-5 h-5\" />\n              </Button>\n            </Link>\n            <h1 className=\"text-3xl font-serif font-bold text-foreground\">Shopping Cart</h1>\n          </div>\n\n          {/* Empty State */}\n          <div className=\"text-center\">\n            <div className=\"text-6xl mb-4 opacity-50\">🛒</div>\n            <h2 className=\"text-2xl font-serif font-bold text-foreground mb-4\">\n              Your cart is empty\n            </h2>\n            <p className=\"text-muted-foreground mb-8\">\n              Discover our premium gifts and add them to your cart\n            </p>\n            <Link href=\"/products\">\n              <Button className=\"btn-primary\" data-testid=\"button-shop-now\">\n                Shop Now\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const tax = subtotal * 0.08; // 8% tax\n  const shipping = subtotal > 75 ? 0 : 9.99;\n  const total = subtotal + tax + shipping;\n\n  return (\n    <div className=\"pt-20\" data-testid=\"page-cart\">\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <div className=\"flex items-center\">\n            <Link href=\"/products\">\n              <Button variant=\"ghost\" size=\"icon\" className=\"mr-4\" data-testid=\"button-back\">\n                <ArrowLeft className=\"w-5 h-5\" />\n              </Button>\n            </Link>\n            <div>\n              <h1 className=\"text-3xl font-serif font-bold text-foreground\">Shopping Cart</h1>\n              <p className=\"text-muted-foreground\" data-testid=\"text-cart-items\">\n                {totalItems} {totalItems === 1 ? 'item' : 'items'}\n              </p>\n            </div>\n          </div>\n          <Button \n            variant=\"outline\" \n            onClick={clearCart}\n            className=\"text-destructive hover:text-destructive\"\n            data-testid=\"button-clear-cart\"\n          >\n            Clear Cart\n          </Button>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Cart Items */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {items.map((item) => (\n              <div \n                key={item.id} \n                className=\"glass-card p-6 rounded-2xl\"\n                data-testid={`cart-item-${item.productId}`}\n              >\n                <div className=\"flex items-start space-x-4\">\n                  {/* Product Image */}\n                  <Link href={`/products/${item.productId}`}>\n                    <img\n                      src={item.product?.imageUrl}\n                      alt={item.product?.name}\n                      className=\"w-24 h-24 object-cover rounded-lg hover:scale-105 transition-transform duration-200\"\n                      data-testid=\"img-cart-item\"\n                    />\n                  </Link>\n\n                  {/* Product Details */}\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <Link href={`/products/${item.productId}`}>\n                          <h3 className=\"font-semibold text-foreground hover:text-primary transition-colors line-clamp-2\" data-testid=\"text-cart-item-name\">\n                            {item.product?.name}\n                          </h3>\n                        </Link>\n                        <p className=\"text-sm text-muted-foreground mt-1 line-clamp-2\">\n                          {item.product?.description}\n                        </p>\n                        \n                        {/* Tags */}\n                        {item.product?.tags && item.product.tags.length > 0 && (\n                          <div className=\"flex flex-wrap gap-1 mt-2\">\n                            {item.product.tags.slice(0, 2).map((tag) => (\n                              <Badge key={tag} variant=\"secondary\" className=\"text-xs\">\n                                {tag}\n                              </Badge>\n                            ))}\n                          </div>\n                        )}\n                      </div>\n\n                      {/* Remove Button */}\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        onClick={() => removeItem(item.productId)}\n                        className=\"text-muted-foreground hover:text-destructive ml-4\"\n                        data-testid=\"button-remove-item\"\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n\n                    {/* Price and Quantity Controls */}\n                    <div className=\"flex items-center justify-between mt-4\">\n                      <div className=\"flex items-baseline space-x-2\">\n                        <span className=\"text-lg font-semibold text-primary\" data-testid=\"text-cart-item-price\">\n                          ${item.product?.price}\n                        </span>\n                        {item.product?.originalPrice && item.product.originalPrice > item.product.price && (\n                          <span className=\"text-sm text-muted-foreground line-through\">\n                            ${item.product.originalPrice}\n                          </span>\n                        )}\n                      </div>\n\n                      {/* Quantity Controls */}\n                      <div className=\"flex items-center space-x-3\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"icon\"\n                          onClick={() => updateQuantity(item.productId, item.quantity - 1)}\n                          className=\"w-8 h-8\"\n                          data-testid=\"button-decrease-quantity\"\n                        >\n                          <Minus className=\"w-3 h-3\" />\n                        </Button>\n                        <span className=\"px-3 py-1 bg-background border rounded min-w-[2.5rem] text-center\" data-testid=\"text-quantity\">\n                          {item.quantity}\n                        </span>\n                        <Button\n                          variant=\"outline\"\n                          size=\"icon\"\n                          onClick={() => updateQuantity(item.productId, item.quantity + 1)}\n                          className=\"w-8 h-8\"\n                          disabled={item.quantity >= (item.product?.stockQuantity || 0)}\n                          data-testid=\"button-increase-quantity\"\n                        >\n                          <Plus className=\"w-3 h-3\" />\n                        </Button>\n                      </div>\n                    </div>\n\n                    {/* Item Total */}\n                    <div className=\"flex justify-between items-center mt-3 pt-3 border-t border-border\">\n                      <span className=\"text-sm text-muted-foreground\">Item total:</span>\n                      <span className=\"font-semibold text-foreground\" data-testid=\"text-item-total\">\n                        ${((item.product?.price || 0) * item.quantity).toFixed(2)}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n\n            {/* Continue Shopping */}\n            <div className=\"text-center pt-6\">\n              <Link href=\"/products\">\n                <Button variant=\"outline\" className=\"px-8\" data-testid=\"button-continue-shopping\">\n                  Continue Shopping\n                </Button>\n              </Link>\n            </div>\n          </div>\n\n          {/* Order Summary */}\n          <div className=\"lg:col-span-1\">\n            <div className=\"glass-card p-6 rounded-2xl sticky top-24\" data-testid=\"order-summary\">\n              <h2 className=\"text-xl font-serif font-bold text-foreground mb-6\">Order Summary</h2>\n              \n              <div className=\"space-y-4\">\n                <div className=\"flex justify-between\">\n                  <span>Subtotal ({totalItems} items):</span>\n                  <span data-testid=\"text-subtotal\">${subtotal.toFixed(2)}</span>\n                </div>\n                \n                <div className=\"flex justify-between\">\n                  <span>Tax (8%):</span>\n                  <span data-testid=\"text-tax\">${tax.toFixed(2)}</span>\n                </div>\n                \n                <div className=\"flex justify-between\">\n                  <div className=\"flex flex-col\">\n                    <span>Shipping:</span>\n                    {shipping === 0 && (\n                      <span className=\"text-xs text-green-600 dark:text-green-400\">Free shipping!</span>\n                    )}\n                  </div>\n                  <span data-testid=\"text-shipping\">\n                    {shipping === 0 ? 'Free' : `$${shipping.toFixed(2)}`}\n                  </span>\n                </div>\n\n                {shipping > 0 && (\n                  <div className=\"text-xs text-muted-foreground\">\n                    Add ${(75 - subtotal).toFixed(2)} more for free shipping\n                  </div>\n                )}\n                \n                <Separator />\n                \n                <div className=\"flex justify-between text-lg font-semibold\">\n                  <span>Total:</span>\n                  <span className=\"text-primary\" data-testid=\"text-total\">${total.toFixed(2)}</span>\n                </div>\n              </div>\n\n              <div className=\"mt-6 space-y-3\">\n                <Link href=\"/checkout\">\n                  <Button className=\"btn-primary w-full py-3 font-semibold\" data-testid=\"button-checkout\">\n                    <ShoppingBag className=\"w-4 h-4 mr-2\" />\n                    Proceed to Checkout\n                  </Button>\n                </Link>\n                \n                <div className=\"text-center\">\n                  <Link href=\"/wishlist\">\n                    <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-view-wishlist\">\n                      <Heart className=\"w-4 h-4 mr-2\" />\n                      View Wishlist\n                    </Button>\n                  </Link>\n                </div>\n              </div>\n\n              {/* Security Badge */}\n              <div className=\"mt-6 pt-6 border-t border-border text-center\">\n                <div className=\"flex items-center justify-center space-x-2 text-sm text-muted-foreground\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                  <span>Secure Checkout</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12378},"client/src/pages/Checkout.tsx":{"content":"import React, { useState } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { ArrowLeft, CreditCard, Truck, Shield, Check } from 'lucide-react';\nimport { useCart } from '@/contexts/CartContext';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Separator } from '@/components/ui/separator';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function Checkout() {\n  const { items, subtotal, clearCart } = useCart();\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [step, setStep] = useState<'shipping' | 'payment' | 'review'>('shipping');\n\n  const [shippingInfo, setShippingInfo] = useState({\n    firstName: user?.displayName?.split(' ')[0] || '',\n    lastName: user?.displayName?.split(' ')[1] || '',\n    email: user?.email || '',\n    phone: '',\n    address: '',\n    city: '',\n    state: '',\n    zipCode: '',\n    country: 'United States',\n  });\n\n  const [paymentInfo, setPaymentInfo] = useState({\n    cardNumber: '',\n    expiryDate: '',\n    cvv: '',\n    nameOnCard: '',\n    billingAddressSame: true,\n  });\n\n  const [billingInfo, setBillingInfo] = useState({\n    address: '',\n    city: '',\n    state: '',\n    zipCode: '',\n    country: 'United States',\n  });\n\n  if (!user) {\n    return (\n      <div className=\"pt-20\" data-testid=\"checkout-signin-required\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-16 text-center\">\n          <div className=\"text-6xl mb-4 opacity-50\">🔒</div>\n          <h1 className=\"text-2xl font-serif font-bold text-foreground mb-4\">\n            Sign In Required\n          </h1>\n          <p className=\"text-muted-foreground mb-8\">\n            Please sign in to proceed with checkout.\n          </p>\n          <Link href=\"/cart\">\n            <Button className=\"btn-primary\" data-testid=\"button-back-to-cart\">\n              Back to Cart\n            </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  if (items.length === 0) {\n    return (\n      <div className=\"pt-20\" data-testid=\"checkout-empty-cart\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-16 text-center\">\n          <div className=\"text-6xl mb-4 opacity-50\">🛒</div>\n          <h1 className=\"text-2xl font-serif font-bold text-foreground mb-4\">\n            Your cart is empty\n          </h1>\n          <p className=\"text-muted-foreground mb-8\">\n            Add some items to your cart before proceeding to checkout.\n          </p>\n          <Link href=\"/products\">\n            <Button className=\"btn-primary\" data-testid=\"button-shop-now\">\n              Shop Now\n            </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  const tax = subtotal * 0.08;\n  const shipping = subtotal > 75 ? 0 : 9.99;\n  const total = subtotal + tax + shipping;\n\n  const handleShippingSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    setStep('payment');\n  };\n\n  const handlePaymentSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    setStep('review');\n  };\n\n  const handleOrderSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsProcessing(true);\n\n    try {\n      // Simulate order processing\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      // Clear cart and redirect to success page\n      clearCart();\n      toast({\n        title: 'Order placed successfully!',\n        description: 'Thank you for your purchase. You will receive a confirmation email shortly.',\n      });\n      \n      setLocation('/account?tab=orders');\n    } catch (error) {\n      toast({\n        title: 'Order failed',\n        description: 'There was an error processing your order. Please try again.',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const renderStepIndicator = () => (\n    <div className=\"flex items-center justify-center space-x-4 mb-8\">\n      <div className={`flex items-center space-x-2 ${step === 'shipping' ? 'text-primary' : step === 'payment' || step === 'review' ? 'text-green-500' : 'text-muted-foreground'}`}>\n        <div className={`w-8 h-8 rounded-full border-2 flex items-center justify-center ${step === 'shipping' ? 'border-primary bg-primary text-primary-foreground' : step === 'payment' || step === 'review' ? 'border-green-500 bg-green-500 text-white' : 'border-muted-foreground'}`}>\n          {step === 'payment' || step === 'review' ? <Check className=\"w-4 h-4\" /> : '1'}\n        </div>\n        <span className=\"font-medium\">Shipping</span>\n      </div>\n      \n      <div className={`w-8 h-0.5 ${step === 'payment' || step === 'review' ? 'bg-green-500' : 'bg-muted-foreground'}`}></div>\n      \n      <div className={`flex items-center space-x-2 ${step === 'payment' ? 'text-primary' : step === 'review' ? 'text-green-500' : 'text-muted-foreground'}`}>\n        <div className={`w-8 h-8 rounded-full border-2 flex items-center justify-center ${step === 'payment' ? 'border-primary bg-primary text-primary-foreground' : step === 'review' ? 'border-green-500 bg-green-500 text-white' : 'border-muted-foreground'}`}>\n          {step === 'review' ? <Check className=\"w-4 h-4\" /> : '2'}\n        </div>\n        <span className=\"font-medium\">Payment</span>\n      </div>\n      \n      <div className={`w-8 h-0.5 ${step === 'review' ? 'bg-primary' : 'bg-muted-foreground'}`}></div>\n      \n      <div className={`flex items-center space-x-2 ${step === 'review' ? 'text-primary' : 'text-muted-foreground'}`}>\n        <div className={`w-8 h-8 rounded-full border-2 flex items-center justify-center ${step === 'review' ? 'border-primary bg-primary text-primary-foreground' : 'border-muted-foreground'}`}>\n          3\n        </div>\n        <span className=\"font-medium\">Review</span>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"pt-20\" data-testid=\"page-checkout\">\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"flex items-center mb-8\">\n          <Link href=\"/cart\">\n            <Button variant=\"ghost\" size=\"icon\" className=\"mr-4\" data-testid=\"button-back\">\n              <ArrowLeft className=\"w-5 h-5\" />\n            </Button>\n          </Link>\n          <h1 className=\"text-3xl font-serif font-bold text-foreground\">Checkout</h1>\n        </div>\n\n        {/* Step Indicator */}\n        {renderStepIndicator()}\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Main Content */}\n          <div className=\"lg:col-span-2\">\n            {step === 'shipping' && (\n              <div className=\"glass-card p-8 rounded-2xl\" data-testid=\"shipping-form\">\n                <div className=\"flex items-center mb-6\">\n                  <Truck className=\"w-6 h-6 text-primary mr-3\" />\n                  <h2 className=\"text-xl font-serif font-bold\">Shipping Information</h2>\n                </div>\n                \n                <form onSubmit={handleShippingSubmit} className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"firstName\">First Name *</Label>\n                      <Input\n                        id=\"firstName\"\n                        value={shippingInfo.firstName}\n                        onChange={(e) => setShippingInfo(prev => ({ ...prev, firstName: e.target.value }))}\n                        required\n                        data-testid=\"input-first-name\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"lastName\">Last Name *</Label>\n                      <Input\n                        id=\"lastName\"\n                        value={shippingInfo.lastName}\n                        onChange={(e) => setShippingInfo(prev => ({ ...prev, lastName: e.target.value }))}\n                        required\n                        data-testid=\"input-last-name\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"email\">Email *</Label>\n                      <Input\n                        id=\"email\"\n                        type=\"email\"\n                        value={shippingInfo.email}\n                        onChange={(e) => setShippingInfo(prev => ({ ...prev, email: e.target.value }))}\n                        required\n                        data-testid=\"input-email\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"phone\">Phone Number *</Label>\n                      <Input\n                        id=\"phone\"\n                        type=\"tel\"\n                        value={shippingInfo.phone}\n                        onChange={(e) => setShippingInfo(prev => ({ ...prev, phone: e.target.value }))}\n                        required\n                        data-testid=\"input-phone\"\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"address\">Address *</Label>\n                    <Input\n                      id=\"address\"\n                      value={shippingInfo.address}\n                      onChange={(e) => setShippingInfo(prev => ({ ...prev, address: e.target.value }))}\n                      required\n                      data-testid=\"input-address\"\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <div>\n                      <Label htmlFor=\"city\">City *</Label>\n                      <Input\n                        id=\"city\"\n                        value={shippingInfo.city}\n                        onChange={(e) => setShippingInfo(prev => ({ ...prev, city: e.target.value }))}\n                        required\n                        data-testid=\"input-city\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"state\">State *</Label>\n                      <Select \n                        value={shippingInfo.state} \n                        onValueChange={(value) => setShippingInfo(prev => ({ ...prev, state: value }))}\n                      >\n                        <SelectTrigger data-testid=\"select-state\">\n                          <SelectValue placeholder=\"Select state\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"CA\">California</SelectItem>\n                          <SelectItem value=\"NY\">New York</SelectItem>\n                          <SelectItem value=\"TX\">Texas</SelectItem>\n                          <SelectItem value=\"FL\">Florida</SelectItem>\n                          {/* Add more states as needed */}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div>\n                      <Label htmlFor=\"zipCode\">ZIP Code *</Label>\n                      <Input\n                        id=\"zipCode\"\n                        value={shippingInfo.zipCode}\n                        onChange={(e) => setShippingInfo(prev => ({ ...prev, zipCode: e.target.value }))}\n                        required\n                        data-testid=\"input-zip\"\n                      />\n                    </div>\n                  </div>\n\n                  <Button type=\"submit\" className=\"btn-primary w-full\" data-testid=\"button-continue-payment\">\n                    Continue to Payment\n                  </Button>\n                </form>\n              </div>\n            )}\n\n            {step === 'payment' && (\n              <div className=\"glass-card p-8 rounded-2xl\" data-testid=\"payment-form\">\n                <div className=\"flex items-center mb-6\">\n                  <CreditCard className=\"w-6 h-6 text-primary mr-3\" />\n                  <h2 className=\"text-xl font-serif font-bold\">Payment Information</h2>\n                </div>\n                \n                <form onSubmit={handlePaymentSubmit} className=\"space-y-6\">\n                  <div>\n                    <Label htmlFor=\"nameOnCard\">Name on Card *</Label>\n                    <Input\n                      id=\"nameOnCard\"\n                      value={paymentInfo.nameOnCard}\n                      onChange={(e) => setPaymentInfo(prev => ({ ...prev, nameOnCard: e.target.value }))}\n                      required\n                      data-testid=\"input-name-on-card\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"cardNumber\">Card Number *</Label>\n                    <Input\n                      id=\"cardNumber\"\n                      placeholder=\"1234 5678 9012 3456\"\n                      value={paymentInfo.cardNumber}\n                      onChange={(e) => setPaymentInfo(prev => ({ ...prev, cardNumber: e.target.value }))}\n                      required\n                      data-testid=\"input-card-number\"\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"expiryDate\">Expiry Date *</Label>\n                      <Input\n                        id=\"expiryDate\"\n                        placeholder=\"MM/YY\"\n                        value={paymentInfo.expiryDate}\n                        onChange={(e) => setPaymentInfo(prev => ({ ...prev, expiryDate: e.target.value }))}\n                        required\n                        data-testid=\"input-expiry\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"cvv\">CVV *</Label>\n                      <Input\n                        id=\"cvv\"\n                        placeholder=\"123\"\n                        value={paymentInfo.cvv}\n                        onChange={(e) => setPaymentInfo(prev => ({ ...prev, cvv: e.target.value }))}\n                        required\n                        data-testid=\"input-cvv\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"billingAddressSame\"\n                      checked={paymentInfo.billingAddressSame}\n                      onCheckedChange={(checked) => setPaymentInfo(prev => ({ ...prev, billingAddressSame: checked as boolean }))}\n                      data-testid=\"checkbox-billing-same\"\n                    />\n                    <Label htmlFor=\"billingAddressSame\">Billing address is the same as shipping address</Label>\n                  </div>\n\n                  {!paymentInfo.billingAddressSame && (\n                    <div className=\"space-y-4 pt-4 border-t border-border\">\n                      <h3 className=\"font-semibold\">Billing Address</h3>\n                      {/* Billing address form fields similar to shipping */}\n                      <div>\n                        <Label htmlFor=\"billingAddress\">Billing Address *</Label>\n                        <Input\n                          id=\"billingAddress\"\n                          value={billingInfo.address}\n                          onChange={(e) => setBillingInfo(prev => ({ ...prev, address: e.target.value }))}\n                          required={!paymentInfo.billingAddressSame}\n                          data-testid=\"input-billing-address\"\n                        />\n                      </div>\n                      {/* Add more billing fields as needed */}\n                    </div>\n                  )}\n\n                  <div className=\"flex space-x-4\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => setStep('shipping')}\n                      className=\"flex-1\"\n                      data-testid=\"button-back-shipping\"\n                    >\n                      Back to Shipping\n                    </Button>\n                    <Button type=\"submit\" className=\"btn-primary flex-1\" data-testid=\"button-review-order\">\n                      Review Order\n                    </Button>\n                  </div>\n                </form>\n              </div>\n            )}\n\n            {step === 'review' && (\n              <div className=\"glass-card p-8 rounded-2xl\" data-testid=\"order-review\">\n                <div className=\"flex items-center mb-6\">\n                  <Shield className=\"w-6 h-6 text-primary mr-3\" />\n                  <h2 className=\"text-xl font-serif font-bold\">Review Your Order</h2>\n                </div>\n\n                {/* Order Items */}\n                <div className=\"space-y-4 mb-6\">\n                  <h3 className=\"font-semibold\">Order Items</h3>\n                  {items.map((item) => (\n                    <div key={item.id} className=\"flex items-center space-x-4 p-4 bg-muted/20 rounded-lg\">\n                      <img\n                        src={item.product?.imageUrl}\n                        alt={item.product?.name}\n                        className=\"w-16 h-16 object-cover rounded-lg\"\n                      />\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-medium\">{item.product?.name}</h4>\n                        <p className=\"text-sm text-muted-foreground\">Quantity: {item.quantity}</p>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-semibold\">${((item.product?.price || 0) * item.quantity).toFixed(2)}</p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n\n                {/* Shipping Information */}\n                <div className=\"mb-6\">\n                  <h3 className=\"font-semibold mb-3\">Shipping Information</h3>\n                  <div className=\"p-4 bg-muted/20 rounded-lg\">\n                    <p>{shippingInfo.firstName} {shippingInfo.lastName}</p>\n                    <p>{shippingInfo.address}</p>\n                    <p>{shippingInfo.city}, {shippingInfo.state} {shippingInfo.zipCode}</p>\n                    <p>{shippingInfo.email}</p>\n                    <p>{shippingInfo.phone}</p>\n                  </div>\n                </div>\n\n                {/* Payment Information */}\n                <div className=\"mb-6\">\n                  <h3 className=\"font-semibold mb-3\">Payment Information</h3>\n                  <div className=\"p-4 bg-muted/20 rounded-lg\">\n                    <p>**** **** **** {paymentInfo.cardNumber.slice(-4)}</p>\n                    <p>{paymentInfo.nameOnCard}</p>\n                  </div>\n                </div>\n\n                <form onSubmit={handleOrderSubmit}>\n                  <div className=\"flex space-x-4\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => setStep('payment')}\n                      className=\"flex-1\"\n                      data-testid=\"button-back-payment\"\n                    >\n                      Back to Payment\n                    </Button>\n                    <Button \n                      type=\"submit\" \n                      className=\"btn-primary flex-1\"\n                      disabled={isProcessing}\n                      data-testid=\"button-place-order\"\n                    >\n                      {isProcessing ? 'Processing...' : 'Place Order'}\n                    </Button>\n                  </div>\n                </form>\n              </div>\n            )}\n          </div>\n\n          {/* Order Summary Sidebar */}\n          <div className=\"lg:col-span-1\">\n            <div className=\"glass-card p-6 rounded-2xl sticky top-24\" data-testid=\"order-summary\">\n              <h2 className=\"text-xl font-serif font-bold text-foreground mb-6\">Order Summary</h2>\n              \n              <div className=\"space-y-4\">\n                {items.map((item) => (\n                  <div key={item.id} className=\"flex justify-between text-sm\">\n                    <span className=\"flex-1 truncate\">{item.product?.name} × {item.quantity}</span>\n                    <span>${((item.product?.price || 0) * item.quantity).toFixed(2)}</span>\n                  </div>\n                ))}\n                \n                <Separator />\n                \n                <div className=\"flex justify-between\">\n                  <span>Subtotal:</span>\n                  <span data-testid=\"text-subtotal\">${subtotal.toFixed(2)}</span>\n                </div>\n                \n                <div className=\"flex justify-between\">\n                  <span>Tax:</span>\n                  <span data-testid=\"text-tax\">${tax.toFixed(2)}</span>\n                </div>\n                \n                <div className=\"flex justify-between\">\n                  <span>Shipping:</span>\n                  <span data-testid=\"text-shipping\">\n                    {shipping === 0 ? 'Free' : `$${shipping.toFixed(2)}`}\n                  </span>\n                </div>\n                \n                <Separator />\n                \n                <div className=\"flex justify-between text-lg font-semibold\">\n                  <span>Total:</span>\n                  <span className=\"text-primary\" data-testid=\"text-total\">${total.toFixed(2)}</span>\n                </div>\n              </div>\n\n              {/* Security Features */}\n              <div className=\"mt-6 pt-6 border-t border-border\">\n                <div className=\"space-y-2 text-sm text-muted-foreground\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Shield className=\"w-4 h-4 text-green-500\" />\n                    <span>Secure SSL encryption</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Check className=\"w-4 h-4 text-green-500\" />\n                    <span>Money-back guarantee</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Truck className=\"w-4 h-4 text-green-500\" />\n                    <span>Free returns within 30 days</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":22644},"client/src/pages/Home.tsx":{"content":"import React from 'react';\nimport { Link } from 'wouter';\nimport { Gift, Users, Globe, Star } from 'lucide-react';\nimport { useProducts } from '@/hooks/useProducts';\nimport { ProductCard } from '@/components/product/ProductCard';\nimport { Button } from '@/components/ui/button';\nimport { SparkleBackground } from '@/components/animations/SparkleBackground';\nimport { ConfettiBackground } from '@/components/animations/ConfettiBackground';\n\nexport default function Home() {\n  const { data: featuredProducts, isLoading } = useProducts();\n\n  const categories = [\n    {\n      id: 'birthday',\n      name: 'Birthday Gifts',\n      description: 'Celebrate special moments',\n      icon: '🎂',\n      productCount: '120+ items',\n    },\n    {\n      id: 'anniversary',\n      name: 'Anniversary',\n      description: 'Love & Romance',\n      icon: '💝',\n      productCount: '85+ items',\n    },\n    {\n      id: 'festivals',\n      name: 'Festivals',\n      description: 'Traditional celebrations',\n      icon: '🌸',\n      productCount: '200+ items',\n    },\n    {\n      id: 'corporate',\n      name: 'Corporate',\n      description: 'Professional gifting',\n      icon: '💼',\n      productCount: '75+ items',\n    },\n  ];\n\n  const stats = [\n    { icon: Gift, value: '500+', label: 'Unique Gifts' },\n    { icon: Users, value: '10K+', label: 'Happy Customers' },\n    { icon: Globe, value: '50+', label: 'Countries' },\n    { icon: Star, value: '4.9★', label: 'Average Rating' },\n  ];\n\n  return (\n    <div className=\"relative\" data-testid=\"page-home\">\n      <SparkleBackground />\n      <ConfettiBackground />\n\n      {/* Hero Section */}\n      <section className=\"relative overflow-hidden hero-gradient pt-20\" data-testid=\"hero-section\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20\">\n          <div className=\"text-center mb-16\">\n            <div className=\"animate-float inline-block mb-6\">\n              <div className=\"text-6xl mb-4\">🎁</div>\n            </div>\n            <h1 className=\"text-5xl md:text-7xl font-serif font-bold text-foreground mb-6 animate-shimmer\">\n              Magical Gifts for<br/>\n              <span className=\"text-primary\">Every Celebration</span>\n            </h1>\n            <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n              Discover premium, handcrafted gifts that create unforgettable moments and spread joy to your loved ones.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n              <Link href=\"/products\">\n                <Button className=\"btn-primary px-8 py-4 text-lg font-semibold\" data-testid=\"button-explore-collection\">\n                  Explore Collection\n                </Button>\n              </Link>\n              <Button \n                variant=\"secondary\" \n                className=\"glass-card px-8 py-4 text-lg font-semibold hover:scale-105 transition-all duration-200\"\n                data-testid=\"button-gift-finder\"\n              >\n                Gift Finder\n              </Button>\n            </div>\n          </div>\n\n          {/* Hero Stats */}\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8 text-center\">\n            {stats.map((stat, index) => (\n              <div \n                key={stat.label} \n                className=\"glass-card p-6 rounded-xl animate-float\" \n                style={{ animationDelay: `${(index + 1) * 0.5}s` }}\n                data-testid={`stat-${stat.label.toLowerCase().replace(' ', '-')}`}\n              >\n                <div className=\"text-3xl font-bold text-primary mb-2\">{stat.value}</div>\n                <div className=\"text-muted-foreground\">{stat.label}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Featured Categories */}\n      <section className=\"py-20 bg-muted/30\" data-testid=\"categories-section\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-serif font-bold text-foreground mb-4\">Shop by Category</h2>\n            <p className=\"text-lg text-muted-foreground\">Find the perfect gift for every occasion</p>\n          </div>\n\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8\">\n            {categories.map((category) => (\n              <Link key={category.id} href={`/products?category=${category.id}`}>\n                <div className=\"glass-card product-card p-6 rounded-2xl text-center group cursor-pointer\" data-testid={`category-${category.id}`}>\n                  <div className=\"w-20 h-20 mx-auto mb-4 rounded-full bg-gradient-to-r from-primary to-accent flex items-center justify-center text-2xl\">\n                    {category.icon}\n                  </div>\n                  <h3 className=\"font-semibold text-lg mb-2\">{category.name}</h3>\n                  <p className=\"text-muted-foreground text-sm mb-4\">{category.description}</p>\n                  <div className=\"text-primary font-semibold group-hover:underline\">\n                    {category.productCount}\n                  </div>\n                </div>\n              </Link>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Featured Products */}\n      <section className=\"py-20\" data-testid=\"featured-products-section\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-serif font-bold text-foreground mb-4\">Featured Products</h2>\n            <p className=\"text-lg text-muted-foreground\">Handpicked premium gifts that create magical moments</p>\n          </div>\n\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8\">\n              {Array.from({ length: 4 }).map((_, i) => (\n                <div key={i} className=\"glass-card rounded-2xl p-6 animate-shimmer\" data-testid=\"product-skeleton\">\n                  <div className=\"w-full h-48 bg-muted rounded-lg mb-4\"></div>\n                  <div className=\"h-4 bg-muted rounded mb-2\"></div>\n                  <div className=\"h-3 bg-muted rounded w-3/4 mb-4\"></div>\n                  <div className=\"h-8 bg-muted rounded\"></div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8\">\n              {featuredProducts?.slice(0, 4).map((product) => (\n                <ProductCard key={product.id} product={product} />\n              ))}\n            </div>\n          )}\n\n          <div className=\"text-center mt-12\">\n            <Link href=\"/products\">\n              <Button \n                variant=\"outline\" \n                className=\"glass-card px-8 py-4 text-lg font-semibold hover:scale-105 transition-all duration-200\"\n                data-testid=\"button-view-all-products\"\n              >\n                View All Products →\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":7078},"client/src/pages/ProductDetail.tsx":{"content":"import React, { useState } from 'react';\nimport { useParams, Link } from 'wouter';\nimport { ArrowLeft, Heart, Star, ShoppingBag, Minus, Plus, Share2, Shield, Truck, RotateCcw } from 'lucide-react';\nimport { useProduct } from '@/hooks/useProducts';\nimport { useCart } from '@/contexts/CartContext';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function ProductDetail() {\n  const { id } = useParams();\n  const { data: product, isLoading, error } = useProduct(id!);\n  const { addItem } = useCart();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [quantity, setQuantity] = useState(1);\n  const [selectedImageIndex, setSelectedImageIndex] = useState(0);\n  const [isWishlisted, setIsWishlisted] = useState(false);\n\n  if (isLoading) {\n    return (\n      <div className=\"pt-20\" data-testid=\"loading-product\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n            <div className=\"space-y-4\">\n              <div className=\"w-full h-96 bg-muted rounded-lg animate-shimmer\"></div>\n              <div className=\"grid grid-cols-4 gap-4\">\n                {Array.from({ length: 4 }).map((_, i) => (\n                  <div key={i} className=\"w-full h-20 bg-muted rounded-lg animate-shimmer\"></div>\n                ))}\n              </div>\n            </div>\n            <div className=\"space-y-6\">\n              <div className=\"h-8 bg-muted rounded animate-shimmer\"></div>\n              <div className=\"h-6 bg-muted rounded w-3/4 animate-shimmer\"></div>\n              <div className=\"h-12 bg-muted rounded animate-shimmer\"></div>\n              <div className=\"h-32 bg-muted rounded animate-shimmer\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !product) {\n    return (\n      <div className=\"pt-20\" data-testid=\"product-not-found\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16 text-center\">\n          <div className=\"text-6xl mb-4 opacity-50\">🔍</div>\n          <h1 className=\"text-2xl font-serif font-bold text-foreground mb-4\">\n            Product Not Found\n          </h1>\n          <p className=\"text-muted-foreground mb-8\">\n            The product you're looking for doesn't exist or has been removed.\n          </p>\n          <Link href=\"/products\">\n            <Button className=\"btn-primary\" data-testid=\"button-back-to-products\">\n              Back to Products\n            </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  const handleAddToCart = () => {\n    if (!user) {\n      toast({\n        title: 'Sign in required',\n        description: 'Please sign in to add items to your cart.',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    addItem(product, quantity);\n    toast({\n      title: 'Added to cart!',\n      description: `${quantity} ${product.name} added to your cart.`,\n    });\n  };\n\n  const handleToggleWishlist = () => {\n    if (!user) {\n      toast({\n        title: 'Sign in required',\n        description: 'Please sign in to add items to your wishlist.',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    setIsWishlisted(!isWishlisted);\n    toast({\n      title: isWishlisted ? 'Removed from wishlist' : 'Added to wishlist!',\n      description: `${product.name} ${isWishlisted ? 'removed from' : 'added to'} your wishlist.`,\n    });\n  };\n\n  const renderStars = (rating: number) => {\n    const stars = [];\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 !== 0;\n\n    for (let i = 0; i < fullStars; i++) {\n      stars.push(<Star key={i} className=\"w-4 h-4 fill-current text-primary\" />);\n    }\n\n    if (hasHalfStar) {\n      stars.push(<Star key=\"half\" className=\"w-4 h-4 fill-current text-primary opacity-50\" />);\n    }\n\n    const emptyStars = 5 - stars.length;\n    for (let i = 0; i < emptyStars; i++) {\n      stars.push(<Star key={`empty-${i}`} className=\"w-4 h-4 text-muted-foreground\" />);\n    }\n\n    return stars;\n  };\n\n  const images = product.images.length > 0 ? product.images : [product.imageUrl];\n\n  return (\n    <div className=\"pt-20\" data-testid=\"page-product-detail\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Breadcrumb */}\n        <div className=\"flex items-center space-x-2 text-sm text-muted-foreground mb-8\">\n          <Link href=\"/products\" className=\"hover:text-primary transition-colors\">\n            Products\n          </Link>\n          <span>/</span>\n          <span className=\"text-foreground\">{product.name}</span>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n          {/* Product Images */}\n          <div className=\"space-y-4\">\n            <div className=\"relative overflow-hidden rounded-2xl glass-card\">\n              <img\n                src={images[selectedImageIndex]}\n                alt={product.name}\n                className=\"w-full h-96 object-cover\"\n                data-testid=\"img-product-main\"\n              />\n              {product.tags && product.tags.length > 0 && (\n                <div className=\"absolute top-4 left-4\">\n                  <Badge className=\"bg-primary text-primary-foreground\" data-testid=\"badge-product-tag\">\n                    {product.tags[0]}\n                  </Badge>\n                </div>\n              )}\n              {!product.inStock && (\n                <div className=\"absolute top-4 right-4\">\n                  <Badge variant=\"destructive\" data-testid=\"badge-out-of-stock\">\n                    Out of Stock\n                  </Badge>\n                </div>\n              )}\n            </div>\n\n            {/* Thumbnail Images */}\n            {images.length > 1 && (\n              <div className=\"grid grid-cols-4 gap-4\">\n                {images.map((image, index) => (\n                  <button\n                    key={index}\n                    onClick={() => setSelectedImageIndex(index)}\n                    className={`w-full h-20 object-cover rounded-lg border-2 transition-all duration-200 ${\n                      selectedImageIndex === index\n                        ? 'border-primary'\n                        : 'border-transparent hover:border-primary/50'\n                    }`}\n                    data-testid={`button-thumbnail-${index}`}\n                  >\n                    <img\n                      src={image}\n                      alt={`${product.name} ${index + 1}`}\n                      className=\"w-full h-full object-cover rounded-lg\"\n                    />\n                  </button>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Product Info */}\n          <div className=\"space-y-6\">\n            <div>\n              <h1 className=\"text-3xl font-serif font-bold text-foreground mb-2\" data-testid=\"text-product-name\">\n                {product.name}\n              </h1>\n              <p className=\"text-lg text-muted-foreground\" data-testid=\"text-product-description\">\n                {product.description}\n              </p>\n            </div>\n\n            {/* Rating */}\n            <div className=\"flex items-center space-x-4\" data-testid=\"rating-product\">\n              <div className=\"flex\">\n                {renderStars(product.rating)}\n              </div>\n              <span className=\"text-sm text-muted-foreground\">\n                {product.rating} ({product.reviewCount} reviews)\n              </span>\n            </div>\n\n            {/* Price */}\n            <div className=\"space-y-2\">\n              <div className=\"flex items-baseline space-x-3\">\n                <span className=\"text-3xl font-bold text-foreground\" data-testid=\"text-price\">\n                  ${product.price}\n                </span>\n                {product.originalPrice && product.originalPrice > product.price && (\n                  <span className=\"text-lg text-muted-foreground line-through\" data-testid=\"text-original-price\">\n                    ${product.originalPrice}\n                  </span>\n                )}\n              </div>\n              {product.originalPrice && product.originalPrice > product.price && (\n                <div className=\"text-sm text-secondary font-semibold\">\n                  Save ${(product.originalPrice - product.price).toFixed(2)} (\n                  {Math.round(((product.originalPrice - product.price) / product.originalPrice) * 100)}% off)\n                </div>\n              )}\n            </div>\n\n            {/* Stock Status */}\n            <div className=\"flex items-center space-x-2\">\n              <div className={`w-3 h-3 rounded-full ${product.inStock ? 'bg-green-500' : 'bg-red-500'}`}></div>\n              <span className={`text-sm font-medium ${product.inStock ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'}`}>\n                {product.inStock \n                  ? `In Stock (${product.stockQuantity} available)` \n                  : 'Out of Stock'\n                }\n              </span>\n            </div>\n\n            {/* Quantity & Actions */}\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center space-x-4\">\n                <label className=\"text-sm font-semibold\">Quantity:</label>\n                <div className=\"flex items-center space-x-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    onClick={() => setQuantity(Math.max(1, quantity - 1))}\n                    disabled={!product.inStock}\n                    data-testid=\"button-decrease-quantity\"\n                  >\n                    <Minus className=\"w-4 h-4\" />\n                  </Button>\n                  <span className=\"px-4 py-2 bg-background border rounded min-w-[3rem] text-center\" data-testid=\"text-quantity\">\n                    {quantity}\n                  </span>\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    onClick={() => setQuantity(Math.min(product.stockQuantity, quantity + 1))}\n                    disabled={!product.inStock}\n                    data-testid=\"button-increase-quantity\"\n                  >\n                    <Plus className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n\n              <div className=\"flex space-x-4\">\n                <Button\n                  onClick={handleAddToCart}\n                  disabled={!product.inStock}\n                  className=\"btn-primary flex-1\"\n                  data-testid=\"button-add-to-cart\"\n                >\n                  <ShoppingBag className=\"w-4 h-4 mr-2\" />\n                  Add to Cart\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  onClick={handleToggleWishlist}\n                  className={`px-4 ${isWishlisted ? 'text-secondary border-secondary' : ''}`}\n                  data-testid=\"button-wishlist\"\n                >\n                  <Heart className={`w-4 h-4 ${isWishlisted ? 'fill-current' : ''}`} />\n                </Button>\n                <Button variant=\"outline\" size=\"icon\" data-testid=\"button-share\">\n                  <Share2 className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n\n            {/* Features */}\n            {product.features && product.features.length > 0 && (\n              <div className=\"space-y-3\">\n                <h3 className=\"font-semibold text-foreground\">Key Features:</h3>\n                <ul className=\"space-y-2\">\n                  {product.features.map((feature, index) => (\n                    <li key={index} className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                      <div className=\"w-1.5 h-1.5 bg-primary rounded-full\"></div>\n                      <span>{feature}</span>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            )}\n\n            {/* Guarantees */}\n            <div className=\"grid grid-cols-3 gap-4 pt-6 border-t border-border\">\n              <div className=\"text-center\">\n                <Shield className=\"w-8 h-8 mx-auto mb-2 text-primary\" />\n                <div className=\"text-xs font-semibold\">Secure Payment</div>\n              </div>\n              <div className=\"text-center\">\n                <Truck className=\"w-8 h-8 mx-auto mb-2 text-primary\" />\n                <div className=\"text-xs font-semibold\">Free Shipping</div>\n              </div>\n              <div className=\"text-center\">\n                <RotateCcw className=\"w-8 h-8 mx-auto mb-2 text-primary\" />\n                <div className=\"text-xs font-semibold\">Easy Returns</div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Product Details Tabs */}\n        <div className=\"mt-16\">\n          <Tabs defaultValue=\"description\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-3\">\n              <TabsTrigger value=\"description\">Description</TabsTrigger>\n              <TabsTrigger value=\"specifications\">Specifications</TabsTrigger>\n              <TabsTrigger value=\"reviews\">Reviews ({product.reviewCount})</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"description\" className=\"mt-8\">\n              <div className=\"glass-card p-8 rounded-2xl\">\n                <h3 className=\"text-xl font-serif font-bold mb-4\">Product Description</h3>\n                <p className=\"text-muted-foreground leading-relaxed\">\n                  {product.description}\n                </p>\n                {product.features && product.features.length > 0 && (\n                  <div className=\"mt-6\">\n                    <h4 className=\"font-semibold mb-3\">Features & Benefits:</h4>\n                    <ul className=\"space-y-2\">\n                      {product.features.map((feature, index) => (\n                        <li key={index} className=\"flex items-start space-x-3\">\n                          <div className=\"w-2 h-2 bg-primary rounded-full mt-2 flex-shrink-0\"></div>\n                          <span className=\"text-muted-foreground\">{feature}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n              </div>\n            </TabsContent>\n            \n            <TabsContent value=\"specifications\" className=\"mt-8\">\n              <div className=\"glass-card p-8 rounded-2xl\">\n                <h3 className=\"text-xl font-serif font-bold mb-4\">Specifications</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex justify-between py-2 border-b border-border\">\n                        <span className=\"font-medium\">Product ID:</span>\n                        <span className=\"text-muted-foreground\">{product.id}</span>\n                      </div>\n                      <div className=\"flex justify-between py-2 border-b border-border\">\n                        <span className=\"font-medium\">Category:</span>\n                        <span className=\"text-muted-foreground capitalize\">{product.categoryId}</span>\n                      </div>\n                      <div className=\"flex justify-between py-2 border-b border-border\">\n                        <span className=\"font-medium\">Stock Quantity:</span>\n                        <span className=\"text-muted-foreground\">{product.stockQuantity}</span>\n                      </div>\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex justify-between py-2 border-b border-border\">\n                        <span className=\"font-medium\">Rating:</span>\n                        <span className=\"text-muted-foreground\">{product.rating}/5.0</span>\n                      </div>\n                      <div className=\"flex justify-between py-2 border-b border-border\">\n                        <span className=\"font-medium\">Reviews:</span>\n                        <span className=\"text-muted-foreground\">{product.reviewCount}</span>\n                      </div>\n                      <div className=\"flex justify-between py-2 border-b border-border\">\n                        <span className=\"font-medium\">Tags:</span>\n                        <span className=\"text-muted-foreground\">{product.tags.join(', ')}</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </TabsContent>\n            \n            <TabsContent value=\"reviews\" className=\"mt-8\">\n              <div className=\"glass-card p-8 rounded-2xl\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <h3 className=\"text-xl font-serif font-bold\">Customer Reviews</h3>\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"flex\">{renderStars(product.rating)}</div>\n                    <span className=\"text-lg font-semibold\">{product.rating}</span>\n                    <span className=\"text-muted-foreground\">({product.reviewCount} reviews)</span>\n                  </div>\n                </div>\n                \n                <div className=\"text-center py-12 text-muted-foreground\">\n                  <div className=\"text-4xl mb-4 opacity-50\">💬</div>\n                  <p>Reviews are coming soon! Be the first to review this product.</p>\n                </div>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17918},"client/src/pages/Products.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { Grid, List, Filter } from 'lucide-react';\nimport { useProducts } from '@/hooks/useProducts';\nimport { ProductCard } from '@/components/product/ProductCard';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { SearchFilters } from '@/types';\n\nexport default function Products() {\n  const [location] = useLocation();\n  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');\n  const [showFilters, setShowFilters] = useState(false);\n  const [filters, setFilters] = useState<SearchFilters>({});\n\n  // Parse URL parameters\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const newFilters: SearchFilters = {};\n    \n    if (urlParams.get('search')) {\n      newFilters.query = urlParams.get('search') || '';\n    }\n    if (urlParams.get('category')) {\n      newFilters.category = urlParams.get('category') || '';\n    }\n    \n    setFilters(newFilters);\n  }, [location]);\n\n  const { data: products, isLoading } = useProducts(filters);\n\n  const updateFilter = (key: keyof SearchFilters, value: string) => {\n    setFilters(prev => ({ ...prev, [key]: value }));\n  };\n\n  const clearFilters = () => {\n    setFilters({});\n  };\n\n  const activeFilterCount = Object.values(filters).filter(Boolean).length;\n\n  return (\n    <div className=\"pt-20\" data-testid=\"page-products\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-serif font-bold text-foreground mb-4\">\n            Our Products\n          </h1>\n          <p className=\"text-lg text-muted-foreground\">\n            Discover our complete collection of premium gifts\n          </p>\n        </div>\n\n        {/* Search and Filter Controls */}\n        <div className=\"glass-card p-6 rounded-2xl mb-8\" data-testid=\"search-filters\">\n          {/* Search Bar */}\n          <div className=\"mb-6\">\n            <Label htmlFor=\"search\" className=\"text-sm font-semibold mb-2 block\">\n              Search Products\n            </Label>\n            <Input\n              id=\"search\"\n              type=\"text\"\n              placeholder=\"Search for gifts, occasions, or categories...\"\n              value={filters.query || ''}\n              onChange={(e) => updateFilter('query', e.target.value)}\n              className=\"w-full\"\n              data-testid=\"input-search\"\n            />\n          </div>\n\n          {/* Filter Toggle Button - Mobile */}\n          <div className=\"md:hidden mb-4\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowFilters(!showFilters)}\n              className=\"w-full\"\n              data-testid=\"button-toggle-filters\"\n            >\n              <Filter className=\"w-4 h-4 mr-2\" />\n              Filters {activeFilterCount > 0 && `(${activeFilterCount})`}\n            </Button>\n          </div>\n\n          {/* Filter Controls */}\n          <div className={`grid grid-cols-1 md:grid-cols-4 gap-4 ${showFilters ? 'block' : 'hidden md:grid'}`}>\n            <div>\n              <Label className=\"text-sm font-semibold mb-2 block\">Category</Label>\n              <Select value={filters.category || 'all'} onValueChange={(value) => updateFilter('category', value === 'all' ? '' : value)}>\n                <SelectTrigger data-testid=\"select-category\">\n                  <SelectValue placeholder=\"All Categories\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Categories</SelectItem>\n                  <SelectItem value=\"birthday\">Birthday Gifts</SelectItem>\n                  <SelectItem value=\"anniversary\">Anniversary</SelectItem>\n                  <SelectItem value=\"festivals\">Festivals</SelectItem>\n                  <SelectItem value=\"corporate\">Corporate</SelectItem>\n                  <SelectItem value=\"flowers\">Flowers</SelectItem>\n                  <SelectItem value=\"jewelry\">Jewelry</SelectItem>\n                  <SelectItem value=\"chocolates\">Chocolates</SelectItem>\n                  <SelectItem value=\"spa\">Spa & Wellness</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label className=\"text-sm font-semibold mb-2 block\">Price Range</Label>\n              <Select value={filters.priceRange || 'all'} onValueChange={(value) => updateFilter('priceRange', value === 'all' ? '' : value)}>\n                <SelectTrigger data-testid=\"select-price\">\n                  <SelectValue placeholder=\"All Prices\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Prices</SelectItem>\n                  <SelectItem value=\"0-50\">Under $50</SelectItem>\n                  <SelectItem value=\"50-100\">$50 - $100</SelectItem>\n                  <SelectItem value=\"100-200\">$100 - $200</SelectItem>\n                  <SelectItem value=\"200-500\">$200 - $500</SelectItem>\n                  <SelectItem value=\"500\">Over $500</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label className=\"text-sm font-semibold mb-2 block\">Sort By</Label>\n              <Select value={filters.sortBy || 'popular'} onValueChange={(value) => updateFilter('sortBy', value)}>\n                <SelectTrigger data-testid=\"select-sort\">\n                  <SelectValue placeholder=\"Most Popular\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"popular\">Most Popular</SelectItem>\n                  <SelectItem value=\"newest\">Newest First</SelectItem>\n                  <SelectItem value=\"price-low\">Price: Low to High</SelectItem>\n                  <SelectItem value=\"price-high\">Price: High to Low</SelectItem>\n                  <SelectItem value=\"rating\">Highest Rated</SelectItem>\n                  <SelectItem value=\"name\">Alphabetical</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label className=\"text-sm font-semibold mb-2 block\">Availability</Label>\n              <Select value={filters.availability || 'all'} onValueChange={(value) => updateFilter('availability', value === 'all' ? '' : value)}>\n                <SelectTrigger data-testid=\"select-availability\">\n                  <SelectValue placeholder=\"All Items\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Items</SelectItem>\n                  <SelectItem value=\"in-stock\">In Stock Only</SelectItem>\n                  <SelectItem value=\"low-stock\">Low Stock</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Active Filters */}\n          {activeFilterCount > 0 && (\n            <div className=\"flex flex-wrap gap-2 mt-4 pt-4 border-t border-border\">\n              {filters.query && (\n                <Badge variant=\"secondary\" className=\"flex items-center gap-1\" data-testid=\"filter-query\">\n                  Search: \"{filters.query}\"\n                  <button onClick={() => updateFilter('query', '')} className=\"ml-1 hover:bg-destructive/20 rounded-full\">×</button>\n                </Badge>\n              )}\n              {filters.category && (\n                <Badge variant=\"secondary\" className=\"flex items-center gap-1\" data-testid=\"filter-category\">\n                  Category: {filters.category}\n                  <button onClick={() => updateFilter('category', '')} className=\"ml-1 hover:bg-destructive/20 rounded-full\">×</button>\n                </Badge>\n              )}\n              {filters.priceRange && (\n                <Badge variant=\"secondary\" className=\"flex items-center gap-1\" data-testid=\"filter-price-range\">\n                  Price: ${filters.priceRange}\n                  <button onClick={() => updateFilter('priceRange', '')} className=\"ml-1 hover:bg-destructive/20 rounded-full\">×</button>\n                </Badge>\n              )}\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={clearFilters}\n                className=\"text-muted-foreground hover:text-foreground\"\n                data-testid=\"button-clear-filters\"\n              >\n                Clear All Filters\n              </Button>\n            </div>\n          )}\n        </div>\n\n        {/* Results Header */}\n        <div className=\"flex justify-between items-center mb-8\">\n          <div>\n            <h3 className=\"text-lg font-semibold text-foreground\">\n              Search Results \n              <span className=\"text-muted-foreground ml-2\" data-testid=\"text-results-count\">\n                ({products?.length || 0} items found)\n              </span>\n            </h3>\n          </div>\n          <div className=\"flex space-x-2\">\n            <Button\n              variant={viewMode === 'grid' ? 'default' : 'outline'}\n              size=\"icon\"\n              onClick={() => setViewMode('grid')}\n              data-testid=\"button-grid-view\"\n            >\n              <Grid className=\"w-4 h-4\" />\n            </Button>\n            <Button\n              variant={viewMode === 'list' ? 'default' : 'outline'}\n              size=\"icon\"\n              onClick={() => setViewMode('list')}\n              data-testid=\"button-list-view\"\n            >\n              <List className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n\n        {/* Products Grid/List */}\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8\">\n            {Array.from({ length: 8 }).map((_, i) => (\n              <div key={i} className=\"glass-card rounded-2xl p-6 animate-shimmer\" data-testid=\"product-skeleton\">\n                <div className=\"w-full h-48 bg-muted rounded-lg mb-4\"></div>\n                <div className=\"h-4 bg-muted rounded mb-2\"></div>\n                <div className=\"h-3 bg-muted rounded w-3/4 mb-4\"></div>\n                <div className=\"h-8 bg-muted rounded\"></div>\n              </div>\n            ))}\n          </div>\n        ) : products && products.length > 0 ? (\n          <div className={`grid gap-8 ${\n            viewMode === 'grid' \n              ? 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4' \n              : 'grid-cols-1 md:grid-cols-2'\n          }`} data-testid=\"products-grid\">\n            {products.map((product) => (\n              <ProductCard key={product.id} product={product} />\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-16\" data-testid=\"no-results\">\n            <div className=\"text-6xl mb-4 opacity-50\">🔍</div>\n            <h3 className=\"text-xl font-semibold text-foreground mb-2\">\n              No products found\n            </h3>\n            <p className=\"text-muted-foreground mb-6\">\n              Try adjusting your search criteria or browse our categories\n            </p>\n            <Button onClick={clearFilters} className=\"btn-primary\" data-testid=\"button-clear-search\">\n              Clear Filters\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":11479},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/types/index.ts":{"content":"export interface Product {\n  id: string;\n  name: string;\n  description: string;\n  price: number;\n  originalPrice?: number;\n  imageUrl: string;\n  images: string[];\n  categoryId?: string;\n  inStock: boolean;\n  stockQuantity: number;\n  rating: number;\n  reviewCount: number;\n  tags: string[];\n  features: string[];\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface Category {\n  id: string;\n  name: string;\n  description?: string;\n  icon?: string;\n  createdAt: string;\n}\n\nexport interface CartItem {\n  id: string;\n  userId: string;\n  productId: string;\n  product?: Product;\n  quantity: number;\n  createdAt: string;\n}\n\nexport interface WishlistItem {\n  id: string;\n  userId: string;\n  productId: string;\n  product?: Product;\n  createdAt: string;\n}\n\nexport interface Order {\n  id: string;\n  userId: string;\n  status: string;\n  total: number;\n  shippingAddress: {\n    name: string;\n    address: string;\n    city: string;\n    state: string;\n    zipCode: string;\n    country: string;\n  };\n  items: OrderItem[];\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface OrderItem {\n  id: string;\n  orderId: string;\n  productId: string;\n  product?: Product;\n  quantity: number;\n  price: number;\n}\n\nexport interface User {\n  id: string;\n  email: string;\n  displayName?: string;\n  photoURL?: string;\n  firebaseUid?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface Review {\n  id: string;\n  userId: string;\n  productId: string;\n  user?: User;\n  rating: number;\n  comment?: string;\n  createdAt: string;\n}\n\nexport interface SearchFilters {\n  category?: string;\n  priceRange?: string;\n  sortBy?: string;\n  availability?: string;\n  query?: string;\n}\n","size_bytes":1669},"client/src/components/animations/ConfettiBackground.tsx":{"content":"import React from 'react';\n\nexport function ConfettiBackground() {\n  const particles = Array.from({ length: 12 }, (_, i) => i);\n\n  return (\n    <div className=\"fixed inset-0 pointer-events-none z-0 overflow-hidden\">\n      {particles.map((i) => (\n        <div\n          key={i}\n          className=\"absolute w-2 h-2 rounded-sm animate-confetti-fall\"\n          style={{\n            left: `${(i + 1) * 8}%`,\n            animationDelay: `${i * 0.3}s`,\n            backgroundColor: i % 3 === 0 \n              ? 'hsl(var(--primary))' \n              : i % 3 === 1 \n              ? 'hsl(var(--secondary))' \n              : 'hsl(var(--accent))',\n          }}\n        />\n      ))}\n    </div>\n  );\n}\n","size_bytes":689},"client/src/components/animations/SparkleBackground.tsx":{"content":"import React from 'react';\n\nexport function SparkleBackground() {\n  return (\n    <div className=\"fixed inset-0 pointer-events-none z-0 overflow-hidden\">\n      {/* Sparkle elements */}\n      <div className=\"absolute top-10 left-10 text-2xl animate-sparkle\">✨</div>\n      <div className=\"absolute top-20 right-20 text-xl animate-sparkle\" style={{ animationDelay: '1s' }}>⭐</div>\n      <div className=\"absolute bottom-20 left-1/4 text-lg animate-sparkle\" style={{ animationDelay: '2s' }}>✨</div>\n      <div className=\"absolute top-1/3 right-1/3 text-xl animate-sparkle\" style={{ animationDelay: '1.5s' }}>💫</div>\n      <div className=\"absolute bottom-1/3 left-1/2 text-lg animate-sparkle\" style={{ animationDelay: '0.5s' }}>⭐</div>\n      <div className=\"absolute top-2/3 right-1/4 text-xl animate-sparkle\" style={{ animationDelay: '2.5s' }}>✨</div>\n    </div>\n  );\n}\n","size_bytes":877},"client/src/components/auth/AuthModal.tsx":{"content":"import React, { useState } from 'react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface AuthModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function AuthModal({ open, onOpenChange }: AuthModalProps) {\n  const { signIn, signUp, signInWithGoogle } = useAuth();\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(false);\n  const [activeTab, setActiveTab] = useState('signin');\n\n  const [signInData, setSignInData] = useState({\n    email: '',\n    password: '',\n  });\n\n  const [signUpData, setSignUpData] = useState({\n    email: '',\n    password: '',\n    confirmPassword: '',\n    displayName: '',\n  });\n\n  const handleSignIn = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n\n    try {\n      await signIn(signInData.email, signInData.password);\n      toast({\n        title: 'Welcome back!',\n        description: 'You have successfully signed in.',\n      });\n      onOpenChange(false);\n      setSignInData({ email: '', password: '' });\n    } catch (error) {\n      toast({\n        title: 'Sign in failed',\n        description: 'Please check your credentials and try again.',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSignUp = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (signUpData.password !== signUpData.confirmPassword) {\n      toast({\n        title: 'Passwords do not match',\n        description: 'Please ensure both passwords are identical.',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      await signUp(signUpData.email, signUpData.password, signUpData.displayName);\n      toast({\n        title: 'Account created!',\n        description: 'Welcome to Sora Gift Store.',\n      });\n      onOpenChange(false);\n      setSignUpData({ email: '', password: '', confirmPassword: '', displayName: '' });\n    } catch (error) {\n      toast({\n        title: 'Sign up failed',\n        description: 'Please try again with valid information.',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleGoogleSignIn = async () => {\n    setLoading(true);\n    try {\n      await signInWithGoogle();\n      onOpenChange(false);\n    } catch (error) {\n      toast({\n        title: 'Google sign in failed',\n        description: 'Please try again.',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md\" data-testid=\"auth-modal\">\n        <DialogHeader>\n          <DialogTitle className=\"text-center font-serif\">\n            Welcome to Sora\n          </DialogTitle>\n        </DialogHeader>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"signin\" data-testid=\"tab-signin\">Sign In</TabsTrigger>\n            <TabsTrigger value=\"signup\" data-testid=\"tab-signup\">Sign Up</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"signin\" className=\"space-y-4\">\n            <form onSubmit={handleSignIn} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"signin-email\">Email</Label>\n                <Input\n                  id=\"signin-email\"\n                  type=\"email\"\n                  value={signInData.email}\n                  onChange={(e) => setSignInData(prev => ({ ...prev, email: e.target.value }))}\n                  required\n                  data-testid=\"input-signin-email\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"signin-password\">Password</Label>\n                <Input\n                  id=\"signin-password\"\n                  type=\"password\"\n                  value={signInData.password}\n                  onChange={(e) => setSignInData(prev => ({ ...prev, password: e.target.value }))}\n                  required\n                  data-testid=\"input-signin-password\"\n                />\n              </div>\n              <Button \n                type=\"submit\" \n                className=\"w-full btn-primary\" \n                disabled={loading}\n                data-testid=\"button-signin\"\n              >\n                {loading ? 'Signing in...' : 'Sign In'}\n              </Button>\n            </form>\n          </TabsContent>\n\n          <TabsContent value=\"signup\" className=\"space-y-4\">\n            <form onSubmit={handleSignUp} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"signup-name\">Display Name</Label>\n                <Input\n                  id=\"signup-name\"\n                  type=\"text\"\n                  value={signUpData.displayName}\n                  onChange={(e) => setSignUpData(prev => ({ ...prev, displayName: e.target.value }))}\n                  required\n                  data-testid=\"input-signup-name\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"signup-email\">Email</Label>\n                <Input\n                  id=\"signup-email\"\n                  type=\"email\"\n                  value={signUpData.email}\n                  onChange={(e) => setSignUpData(prev => ({ ...prev, email: e.target.value }))}\n                  required\n                  data-testid=\"input-signup-email\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"signup-password\">Password</Label>\n                <Input\n                  id=\"signup-password\"\n                  type=\"password\"\n                  value={signUpData.password}\n                  onChange={(e) => setSignUpData(prev => ({ ...prev, password: e.target.value }))}\n                  required\n                  data-testid=\"input-signup-password\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"signup-confirm\">Confirm Password</Label>\n                <Input\n                  id=\"signup-confirm\"\n                  type=\"password\"\n                  value={signUpData.confirmPassword}\n                  onChange={(e) => setSignUpData(prev => ({ ...prev, confirmPassword: e.target.value }))}\n                  required\n                  data-testid=\"input-signup-confirm\"\n                />\n              </div>\n              <Button \n                type=\"submit\" \n                className=\"w-full btn-primary\" \n                disabled={loading}\n                data-testid=\"button-signup\"\n              >\n                {loading ? 'Creating account...' : 'Create Account'}\n              </Button>\n            </form>\n          </TabsContent>\n        </Tabs>\n\n        <div className=\"relative\">\n          <div className=\"absolute inset-0 flex items-center\">\n            <span className=\"w-full border-t border-border\" />\n          </div>\n          <div className=\"relative flex justify-center text-xs uppercase\">\n            <span className=\"bg-background px-2 text-muted-foreground\">Or continue with</span>\n          </div>\n        </div>\n\n        <Button\n          variant=\"outline\"\n          onClick={handleGoogleSignIn}\n          disabled={loading}\n          className=\"w-full\"\n          data-testid=\"button-google-signin\"\n        >\n          <svg className=\"mr-2 h-4 w-4\" viewBox=\"0 0 24 24\">\n            <path\n              d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"\n              fill=\"#4285F4\"\n            />\n            <path\n              d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"\n              fill=\"#34A853\"\n            />\n            <path\n              d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"\n              fill=\"#FBBC05\"\n            />\n            <path\n              d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"\n              fill=\"#EA4335\"\n            />\n          </svg>\n          Continue with Google\n        </Button>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8796},"client/src/components/cart/CartSidebar.tsx":{"content":"import React from 'react';\nimport { Link } from 'wouter';\nimport { X, Plus, Minus, Trash2, ShoppingBag } from 'lucide-react';\nimport { useCart } from '@/contexts/CartContext';\nimport { Button } from '@/components/ui/button';\nimport { Separator } from '@/components/ui/separator';\n\nexport function CartSidebar() {\n  const { \n    items, \n    isOpen, \n    setIsOpen, \n    updateQuantity, \n    removeItem, \n    totalItems, \n    subtotal \n  } = useCart();\n\n  if (!isOpen) return null;\n\n  return (\n    <>\n      {/* Backdrop */}\n      <div \n        className=\"fixed inset-0 bg-black/50 z-40 md:hidden\"\n        onClick={() => setIsOpen(false)}\n        data-testid=\"cart-backdrop\"\n      />\n      \n      {/* Sidebar */}\n      <div className={`fixed right-0 top-0 h-full w-full md:w-96 bg-card border-l border-border transform transition-transform duration-300 z-50 shadow-2xl ${\n        isOpen ? 'translate-x-0' : 'translate-x-full'\n      }`} data-testid=\"cart-sidebar\">\n        {/* Header */}\n        <div className=\"p-6 border-b border-border\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-xl font-serif font-bold text-foreground flex items-center\">\n              <ShoppingBag className=\"w-5 h-5 mr-2\" />\n              Shopping Cart\n            </h2>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => setIsOpen(false)}\n              className=\"text-muted-foreground hover:text-foreground\"\n              data-testid=\"button-close-cart\"\n            >\n              <X className=\"w-5 h-5\" />\n            </Button>\n          </div>\n          {totalItems > 0 && (\n            <p className=\"text-sm text-muted-foreground mt-1\" data-testid=\"text-cart-items\">\n              {totalItems} {totalItems === 1 ? 'item' : 'items'}\n            </p>\n          )}\n        </div>\n        \n        {/* Content */}\n        {items.length === 0 ? (\n          <div className=\"flex flex-col items-center justify-center h-full p-6\">\n            <div className=\"text-6xl mb-4 opacity-50\">🛒</div>\n            <h3 className=\"text-lg font-semibold text-foreground mb-2\" data-testid=\"text-empty-cart\">\n              Your cart is empty\n            </h3>\n            <p className=\"text-muted-foreground text-center mb-6\">\n              Discover our premium gifts and add them to your cart\n            </p>\n            <Link href=\"/products\">\n              <Button \n                onClick={() => setIsOpen(false)}\n                className=\"btn-primary\"\n                data-testid=\"button-shop-now\"\n              >\n                Shop Now\n              </Button>\n            </Link>\n          </div>\n        ) : (\n          <>\n            {/* Items */}\n            <div className=\"flex-1 overflow-y-auto p-6 space-y-4\">\n              {items.map((item) => (\n                <div key={item.id} className=\"flex items-center space-x-4 glass-card p-4 rounded-lg\" data-testid={`cart-item-${item.productId}`}>\n                  <img\n                    src={item.product?.imageUrl}\n                    alt={item.product?.name}\n                    className=\"w-16 h-16 object-cover rounded-lg\"\n                    data-testid=\"img-cart-item\"\n                  />\n                  <div className=\"flex-1 min-w-0\">\n                    <h4 className=\"font-semibold text-foreground truncate\" data-testid=\"text-cart-item-name\">\n                      {item.product?.name}\n                    </h4>\n                    <p className=\"text-sm text-primary font-semibold\" data-testid=\"text-cart-item-price\">\n                      ${item.product?.price}\n                    </p>\n                    <div className=\"flex items-center mt-2 space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"icon\"\n                        onClick={() => updateQuantity(item.productId, item.quantity - 1)}\n                        className=\"w-8 h-8\"\n                        data-testid=\"button-decrease-quantity\"\n                      >\n                        <Minus className=\"w-3 h-3\" />\n                      </Button>\n                      <span className=\"px-3 py-1 bg-background rounded min-w-[2rem] text-center\" data-testid=\"text-quantity\">\n                        {item.quantity}\n                      </span>\n                      <Button\n                        variant=\"outline\"\n                        size=\"icon\"\n                        onClick={() => updateQuantity(item.productId, item.quantity + 1)}\n                        className=\"w-8 h-8\"\n                        data-testid=\"button-increase-quantity\"\n                      >\n                        <Plus className=\"w-3 h-3\" />\n                      </Button>\n                    </div>\n                  </div>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    onClick={() => removeItem(item.productId)}\n                    className=\"text-muted-foreground hover:text-destructive\"\n                    data-testid=\"button-remove-item\"\n                  >\n                    <Trash2 className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              ))}\n            </div>\n\n            {/* Footer */}\n            <div className=\"border-t border-border p-6 bg-card\">\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between text-foreground\">\n                  <span>Subtotal:</span>\n                  <span data-testid=\"text-subtotal\">${subtotal.toFixed(2)}</span>\n                </div>\n                <Separator />\n                <div className=\"flex justify-between text-foreground font-semibold text-lg\">\n                  <span>Total:</span>\n                  <span data-testid=\"text-total\">${subtotal.toFixed(2)}</span>\n                </div>\n                <Link href=\"/checkout\">\n                  <Button \n                    className=\"btn-primary w-full py-3 font-semibold\"\n                    onClick={() => setIsOpen(false)}\n                    data-testid=\"button-checkout\"\n                  >\n                    Proceed to Checkout\n                  </Button>\n                </Link>\n                <Link href=\"/cart\">\n                  <Button \n                    variant=\"outline\" \n                    className=\"w-full\"\n                    onClick={() => setIsOpen(false)}\n                    data-testid=\"button-view-cart\"\n                  >\n                    View Cart\n                  </Button>\n                </Link>\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n    </>\n  );\n}\n","size_bytes":6631},"client/src/components/layout/Footer.tsx":{"content":"import React from 'react';\nimport { Link } from 'wouter';\nimport { Facebook, Instagram, Twitter, Phone, Mail } from 'lucide-react';\n\nexport function Footer() {\n  const currentYear = new Date().getFullYear();\n\n  return (\n    <footer className=\"bg-card border-t border-border\" data-testid=\"footer\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8 mb-12\">\n          {/* Brand Column */}\n          <div className=\"md:col-span-2\">\n            <div className=\"flex items-center space-x-3 mb-6\">\n              <div className=\"text-2xl animate-sparkle\">✨</div>\n              <div>\n                <h1 className=\"text-2xl font-serif font-bold text-primary\">Sora</h1>\n                <p className=\"text-sm text-muted-foreground -mt-1\">Gift Store for All</p>\n              </div>\n            </div>\n            <p className=\"text-muted-foreground mb-6 max-w-md\">\n              Creating magical moments through premium gifts that celebrate life's special occasions. \n              Handcrafted with love, delivered with care.\n            </p>\n            <div className=\"flex space-x-4\">\n              <a \n                href=\"#\" \n                className=\"w-10 h-10 bg-primary text-primary-foreground rounded-full flex items-center justify-center hover:bg-primary/80 transition-colors duration-200\"\n                data-testid=\"link-facebook\"\n              >\n                <Facebook className=\"w-4 h-4\" />\n              </a>\n              <a \n                href=\"#\" \n                className=\"w-10 h-10 bg-primary text-primary-foreground rounded-full flex items-center justify-center hover:bg-primary/80 transition-colors duration-200\"\n                data-testid=\"link-instagram\"\n              >\n                <Instagram className=\"w-4 h-4\" />\n              </a>\n              <a \n                href=\"#\" \n                className=\"w-10 h-10 bg-primary text-primary-foreground rounded-full flex items-center justify-center hover:bg-primary/80 transition-colors duration-200\"\n                data-testid=\"link-twitter\"\n              >\n                <Twitter className=\"w-4 h-4\" />\n              </a>\n            </div>\n          </div>\n\n          {/* Quick Links */}\n          <div>\n            <h3 className=\"font-serif font-bold text-foreground mb-4\">Quick Links</h3>\n            <ul className=\"space-y-2\">\n              {[\n                { href: '/about', label: 'About Us' },\n                { href: '/gift-cards', label: 'Gift Cards' },\n                { href: '/bulk-orders', label: 'Bulk Orders' },\n                { href: '/track-order', label: 'Track Order' },\n                { href: '/returns', label: 'Return Policy' },\n                { href: '/contact', label: 'Contact Us' },\n              ].map((link) => (\n                <li key={link.href}>\n                  <Link \n                    href={link.href} \n                    className=\"text-muted-foreground hover:text-primary transition-colors duration-200\"\n                    data-testid={`link-${link.label.toLowerCase().replace(' ', '-')}`}\n                  >\n                    {link.label}\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          {/* Customer Support */}\n          <div>\n            <h3 className=\"font-serif font-bold text-foreground mb-4\">Support</h3>\n            <ul className=\"space-y-2\">\n              {[\n                { href: '/help', label: 'Help Center' },\n                { href: '/shipping', label: 'Shipping Info' },\n                { href: '/size-guide', label: 'Size Guide' },\n                { href: '/care', label: 'Care Instructions' },\n                { href: '/faq', label: 'FAQs' },\n              ].map((link) => (\n                <li key={link.href}>\n                  <Link \n                    href={link.href} \n                    className=\"text-muted-foreground hover:text-primary transition-colors duration-200\"\n                    data-testid={`link-${link.label.toLowerCase().replace(' ', '-')}`}\n                  >\n                    {link.label}\n                  </Link>\n                </li>\n              ))}\n              <li className=\"pt-2\">\n                <p className=\"text-muted-foreground text-sm flex items-center\">\n                  <Phone className=\"w-4 h-4 mr-2 text-primary\" />\n                  <span data-testid=\"text-phone\">+1 (555) 123-4567</span>\n                </p>\n                <p className=\"text-muted-foreground text-sm flex items-center mt-1\">\n                  <Mail className=\"w-4 h-4 mr-2 text-primary\" />\n                  <span data-testid=\"text-email\">hello@soragifts.com</span>\n                </p>\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        {/* Bottom Bar */}\n        <div className=\"border-t border-border pt-8 flex flex-col md:flex-row justify-between items-center\">\n          <p className=\"text-muted-foreground text-sm mb-4 md:mb-0\" data-testid=\"text-copyright\">\n            © {currentYear} Sora Gift Store. All rights reserved.\n          </p>\n          <div className=\"flex space-x-6\">\n            {[\n              { href: '/privacy', label: 'Privacy Policy' },\n              { href: '/terms', label: 'Terms of Service' },\n              { href: '/cookies', label: 'Cookie Policy' },\n            ].map((link) => (\n              <Link\n                key={link.href}\n                href={link.href}\n                className=\"text-muted-foreground hover:text-primary text-sm transition-colors duration-200\"\n                data-testid={`link-${link.label.toLowerCase().replace(' ', '-')}`}\n              >\n                {link.label}\n              </Link>\n            ))}\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":5788},"client/src/components/layout/Navigation.tsx":{"content":"import React, { useState } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { Search, Heart, ShoppingBag, User, Menu, X, Sun, Moon } from 'lucide-react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useCart } from '@/contexts/CartContext';\nimport { useTheme } from '@/contexts/ThemeContext';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { AuthModal } from '@/components/auth/AuthModal';\n\nexport function Navigation() {\n  const [location] = useLocation();\n  const { user } = useAuth();\n  const { totalItems, setIsOpen: setCartOpen } = useCart();\n  const { isDarkMode, toggleDarkMode } = useTheme();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [isAuthModalOpen, setIsAuthModalOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const navItems = [\n    { href: '/', label: 'Home' },\n    { href: '/products', label: 'Products' },\n    { href: '/categories', label: 'Categories' },\n    { href: '/account', label: 'Account' },\n  ];\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (searchQuery.trim()) {\n      // Navigate to products page with search query\n      window.location.href = `/products?search=${encodeURIComponent(searchQuery)}`;\n    }\n  };\n\n  return (\n    <>\n      <nav className=\"fixed top-0 w-full z-50 nav-blur\" data-testid=\"navigation\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            {/* Logo and Brand */}\n            <Link href=\"/\" className=\"flex items-center space-x-3\" data-testid=\"link-home\">\n              <div className=\"text-2xl animate-sparkle\">✨</div>\n              <div>\n                <h1 className=\"text-xl font-serif font-bold text-primary\">Sora</h1>\n                <p className=\"text-xs text-muted-foreground -mt-1\">Gift Store for All</p>\n              </div>\n            </Link>\n\n            {/* Desktop Navigation */}\n            <div className=\"hidden md:flex items-center space-x-8\">\n              {navItems.map((item) => (\n                <Link\n                  key={item.href}\n                  href={item.href}\n                  className={`transition-colors duration-200 ${\n                    location === item.href\n                      ? 'text-primary font-semibold'\n                      : 'text-foreground hover:text-primary'\n                  }`}\n                  data-testid={`link-${item.label.toLowerCase()}`}\n                >\n                  {item.label}\n                </Link>\n              ))}\n            </div>\n\n            {/* Search Bar - Desktop */}\n            <div className=\"hidden lg:flex items-center flex-1 max-w-sm mx-8\">\n              <form onSubmit={handleSearch} className=\"w-full\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Search gifts...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-10 bg-background/50 backdrop-blur-sm border-border\"\n                    data-testid=\"input-search\"\n                  />\n                </div>\n              </form>\n            </div>\n\n            {/* User Actions */}\n            <div className=\"flex items-center space-x-4\">\n              {/* Search Icon - Mobile */}\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"md:hidden text-foreground hover:text-primary\"\n                data-testid=\"button-search-mobile\"\n              >\n                <Search className=\"w-5 h-5\" />\n              </Button>\n\n              {/* Wishlist */}\n              <Link href=\"/wishlist\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"relative text-foreground hover:text-secondary\"\n                  data-testid=\"button-wishlist\"\n                >\n                  <Heart className=\"w-5 h-5 animate-heartbeat\" />\n                  {user && (\n                    <span className=\"absolute -top-2 -right-2 bg-secondary text-secondary-foreground text-xs rounded-full w-5 h-5 flex items-center justify-center\" data-testid=\"text-wishlist-count\">\n                      3\n                    </span>\n                  )}\n                </Button>\n              </Link>\n\n              {/* Shopping Cart */}\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setCartOpen(true)}\n                className=\"relative text-foreground hover:text-primary\"\n                data-testid=\"button-cart\"\n              >\n                <ShoppingBag className=\"w-5 h-5\" />\n                {totalItems > 0 && (\n                  <span className=\"absolute -top-2 -right-2 bg-primary text-primary-foreground text-xs rounded-full w-5 h-5 flex items-center justify-center\" data-testid=\"text-cart-count\">\n                    {totalItems}\n                  </span>\n                )}\n              </Button>\n\n              {/* Dark Mode Toggle */}\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={toggleDarkMode}\n                className=\"text-foreground hover:text-primary\"\n                data-testid=\"button-dark-mode\"\n              >\n                {isDarkMode ? <Sun className=\"w-5 h-5\" /> : <Moon className=\"w-5 h-5\" />}\n              </Button>\n\n              {/* User Profile */}\n              {user ? (\n                <Link href=\"/account\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"text-foreground hover:text-primary\"\n                    data-testid=\"button-profile\"\n                  >\n                    {user.photoURL ? (\n                      <img\n                        src={user.photoURL}\n                        alt={user.displayName || 'User'}\n                        className=\"w-6 h-6 rounded-full\"\n                        data-testid=\"img-avatar\"\n                      />\n                    ) : (\n                      <User className=\"w-5 h-5\" />\n                    )}\n                  </Button>\n                </Link>\n              ) : (\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={() => setIsAuthModalOpen(true)}\n                  className=\"text-foreground hover:text-primary\"\n                  data-testid=\"button-login\"\n                >\n                  <User className=\"w-5 h-5\" />\n                </Button>\n              )}\n\n              {/* Mobile Menu Toggle */}\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setIsMenuOpen(!isMenuOpen)}\n                className=\"md:hidden text-foreground hover:text-primary\"\n                data-testid=\"button-menu\"\n              >\n                {isMenuOpen ? <X className=\"w-5 h-5\" /> : <Menu className=\"w-5 h-5\" />}\n              </Button>\n            </div>\n          </div>\n\n          {/* Mobile Menu */}\n          {isMenuOpen && (\n            <div className=\"md:hidden border-t border-border bg-card/95 backdrop-blur-sm\">\n              <div className=\"px-2 pt-2 pb-3 space-y-1\">\n                {/* Mobile Search */}\n                <form onSubmit={handleSearch} className=\"mb-4\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                    <Input\n                      type=\"text\"\n                      placeholder=\"Search gifts...\"\n                      value={searchQuery}\n                      onChange={(e) => setSearchQuery(e.target.value)}\n                      className=\"pl-10\"\n                      data-testid=\"input-search-mobile\"\n                    />\n                  </div>\n                </form>\n\n                {navItems.map((item) => (\n                  <Link\n                    key={item.href}\n                    href={item.href}\n                    onClick={() => setIsMenuOpen(false)}\n                    className={`block px-3 py-2 rounded-md text-base font-medium transition-colors duration-200 ${\n                      location === item.href\n                        ? 'text-primary bg-accent/10'\n                        : 'text-foreground hover:text-primary hover:bg-accent/5'\n                    }`}\n                    data-testid={`link-mobile-${item.label.toLowerCase()}`}\n                  >\n                    {item.label}\n                  </Link>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      </nav>\n\n      <AuthModal open={isAuthModalOpen} onOpenChange={setIsAuthModalOpen} />\n    </>\n  );\n}\n","size_bytes":9004},"client/src/components/product/ProductCard.tsx":{"content":"import React from 'react';\nimport { Link } from 'wouter';\nimport { Heart, Eye, ShoppingBag, Star } from 'lucide-react';\nimport { Product } from '@/types';\nimport { useCart } from '@/contexts/CartContext';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\n\ninterface ProductCardProps {\n  product: Product;\n  onQuickView?: (product: Product) => void;\n  onToggleWishlist?: (product: Product) => void;\n}\n\nexport function ProductCard({ product, onQuickView, onToggleWishlist }: ProductCardProps) {\n  const { addItem } = useCart();\n\n  const handleAddToCart = (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    addItem(product);\n  };\n\n  const handleQuickView = (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    onQuickView?.(product);\n  };\n\n  const handleToggleWishlist = (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    onToggleWishlist?.(product);\n  };\n\n  const renderStars = (rating: number) => {\n    const stars = [];\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 !== 0;\n\n    for (let i = 0; i < fullStars; i++) {\n      stars.push(<Star key={i} className=\"w-3 h-3 fill-current text-primary\" />);\n    }\n\n    if (hasHalfStar) {\n      stars.push(<Star key=\"half\" className=\"w-3 h-3 fill-current text-primary opacity-50\" />);\n    }\n\n    const emptyStars = 5 - stars.length;\n    for (let i = 0; i < emptyStars; i++) {\n      stars.push(<Star key={`empty-${i}`} className=\"w-3 h-3 text-muted-foreground\" />);\n    }\n\n    return stars;\n  };\n\n  const getBadgeColor = (tag: string) => {\n    switch (tag.toLowerCase()) {\n      case 'bestseller':\n        return 'bg-secondary text-secondary-foreground';\n      case 'premium':\n        return 'bg-primary text-primary-foreground';\n      case 'limited':\n        return 'bg-accent text-accent-foreground';\n      case 'new':\n        return 'bg-secondary text-secondary-foreground';\n      default:\n        return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  return (\n    <Link href={`/products/${product.id}`}>\n      <div className=\"glass-card product-card rounded-2xl overflow-hidden group cursor-pointer\" data-testid={`card-product-${product.id}`}>\n        <div className=\"relative overflow-hidden\">\n          <img\n            src={product.imageUrl}\n            alt={product.name}\n            className=\"product-image w-full h-64 object-cover\"\n            data-testid=\"img-product\"\n          />\n          \n          {/* Quick Actions Overlay */}\n          <div className=\"absolute inset-0 bg-black/30 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center space-x-4\">\n            <Button\n              variant=\"secondary\"\n              size=\"icon\"\n              onClick={handleQuickView}\n              className=\"glass-card text-white hover:bg-white/20\"\n              data-testid=\"button-quick-view\"\n            >\n              <Eye className=\"w-4 h-4\" />\n            </Button>\n            <Button\n              variant=\"secondary\"\n              size=\"icon\"\n              onClick={handleToggleWishlist}\n              className=\"glass-card text-white hover:bg-white/20 animate-heartbeat\"\n              data-testid=\"button-wishlist\"\n            >\n              <Heart className=\"w-4 h-4\" />\n            </Button>\n          </div>\n\n          {/* Badge */}\n          {product.tags && product.tags.length > 0 && (\n            <div className=\"absolute top-4 left-4\">\n              <Badge \n                className={getBadgeColor(product.tags[0])}\n                data-testid=\"badge-product-tag\"\n              >\n                {product.tags[0]}\n              </Badge>\n            </div>\n          )}\n\n          {/* Stock indicator */}\n          {!product.inStock && (\n            <div className=\"absolute top-4 right-4\">\n              <Badge variant=\"destructive\" data-testid=\"badge-out-of-stock\">\n                Out of Stock\n              </Badge>\n            </div>\n          )}\n        </div>\n\n        <div className=\"p-6\">\n          <div className=\"mb-2\">\n            <h3 className=\"text-lg font-semibold text-foreground group-hover:text-primary transition-colors duration-200 line-clamp-2\" data-testid=\"text-product-name\">\n              {product.name}\n            </h3>\n            <p className=\"text-muted-foreground text-sm line-clamp-2\" data-testid=\"text-product-description\">\n              {product.description}\n            </p>\n          </div>\n\n          {/* Rating */}\n          <div className=\"flex items-center mb-3\" data-testid=\"rating-product\">\n            <div className=\"flex\">\n              {renderStars(product.rating)}\n            </div>\n            <span className=\"text-muted-foreground text-xs ml-2\" data-testid=\"text-review-count\">\n              ({product.reviewCount} reviews)\n            </span>\n          </div>\n\n          {/* Price and Actions */}\n          <div className=\"flex items-center justify-between\">\n            <div className=\"text-lg font-bold text-foreground\">\n              <span data-testid=\"text-price\">${product.price}</span>\n              {product.originalPrice && product.originalPrice > product.price && (\n                <span className=\"text-sm text-muted-foreground line-through ml-2\" data-testid=\"text-original-price\">\n                  ${product.originalPrice}\n                </span>\n              )}\n            </div>\n            <Button\n              onClick={handleAddToCart}\n              disabled={!product.inStock}\n              className=\"btn-primary px-4 py-2 text-sm font-semibold\"\n              data-testid=\"button-add-to-cart\"\n            >\n              <ShoppingBag className=\"w-4 h-4 mr-2\" />\n              Add to Cart\n            </Button>\n          </div>\n        </div>\n      </div>\n    </Link>\n  );\n}\n","size_bytes":5815},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}